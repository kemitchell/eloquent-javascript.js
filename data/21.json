{
  "content": [
    {
      "element": "p",
      "content": [
        "A ",
        {
          "element": "em",
          "content": [
            "skill-sharing"
          ]
        },
        " meeting is an event where people with a shared interest come together and give small, informal presentations about things they know. At a gardening skill-sharing meeting, someone might explain how to cultivate celery. Or in a programming-oriented skill-sharing group, you could drop by and tell everybody about Node.js."
      ]
    },
    {
      "element": "p",
      "content": [
        "Such meetups, also often called ",
        {
          "element": "em",
          "content": [
            "users’ groups"
          ]
        },
        " when they are about computers, are a great way to broaden your horizon, learn about new developments, or simply meet people with similar interests. Many large cities have a JavaScript meetup. They are typically free to attend, and I’ve found the ones I’ve visited to be friendly and welcoming."
      ]
    },
    {
      "element": "p",
      "content": [
        "In this final project chapter, our goal is to set up a website for managing talks given at a skill-sharing meeting. Imagine a small group of people meeting up regularly in a member’s office to talk about unicycling. The problem is that when the previous organizer of the meetings moved to another town, nobody stepped forward to take over this task. We want a system that will let the participants propose and discuss talks among themselves, without a central organizer."
      ]
    },
    {
      "element": "img",
      "src": "img/unicycle.svg"
    },
    {
      "element": "p",
      "content": [
        "Just like in the ",
        {
          "element": "reference",
          "content": "previous chapter"
        },
        ", the code in this chapter is written for Node.js, and running it directly in the HTML page that you are looking at is unlikely to work. The full code for the project can be downloaded from ",
        {
          "element": "reference",
          "content": [
            {
              "element": "em",
              "content": [
                "eloquentjavascript.net/code/skillsharing.zip"
              ]
            }
          ]
        },
        "."
      ]
    },
    {
      "element": "section",
      "content": [
        {
          "element": "p",
          "content": [
            "There is a ",
            {
              "element": "em",
              "content": [
                "server"
              ]
            },
            " part to this project, written for Node.js, and a ",
            {
              "element": "em",
              "content": [
                "client"
              ]
            },
            " part, written for the browser. The server stores the system’s data and provides it to the client. It also serves the HTML and JavaScript files that implement the client-side system."
          ]
        },
        {
          "element": "p",
          "content": [
            "The server keeps a list of talks proposed for the next meeting, and the client shows this list. Each talk has a presenter name, a title, a summary, and a list of comments associated with it. The client allows users to propose new talks (adding them to the list), delete talks, and comment on existing talks. Whenever the user makes such a change, the client makes an HTTP request to tell the server about it."
          ]
        },
        {
          "element": "img",
          "src": "img/skillsharing.png"
        },
        {
          "element": "p",
          "content": [
            "The application will be set up to show a ",
            {
              "element": "em",
              "content": [
                "live"
              ]
            },
            " view of the current proposed talks and their comments. Whenever someone, somewhere, submits a new talk or adds a comment, all people who have the page open in their browsers should immediately see the change. This poses a bit of a challenge since there is no way for a web server to open up a connection to a client, nor is there a good way to know which clients currently are looking at a given website."
          ]
        },
        {
          "element": "p",
          "content": [
            "A common solution to this problem is called ",
            {
              "element": "em",
              "content": [
                "long polling"
              ]
            },
            ", which happens to be one of the motivations for Node’s design."
          ]
        }
      ],
      "title": "Design"
    },
    {
      "element": "section",
      "content": [
        {
          "element": "p",
          "content": [
            "To be able to immediately notify a client that something changed, we need a connection to that client. Since web browsers do not traditionally accept connections and clients are usually behind devices that would block such connections anyway, having the server initiate this connection is not practical."
          ]
        },
        {
          "element": "p",
          "content": [
            "We can arrange for the client to open the connection and keep it around so that the server can use it to send information when it needs to do so."
          ]
        },
        {
          "element": "p",
          "content": [
            "But an HTTP request allows only a simple flow of information, where the client sends a request, the server comes back with a single response, and that is it. There is a technology called ",
            {
              "element": "em",
              "content": [
                "web sockets"
              ]
            },
            ", supported by modern browsers, which makes it possible to open connections for arbitrary data exchange. But using them properly is somewhat tricky."
          ]
        },
        {
          "element": "p",
          "content": [
            "In this chapter, we will use a relatively simple technique, long polling, where clients continuously ask the server for new information using regular HTTP requests, and the server simply stalls its answer when it has nothing new to report."
          ]
        },
        {
          "element": "p",
          "content": [
            "As long as the client makes sure it constantly has a polling request open, it will receive information from the server immediately. For example, if Alice has our skill-sharing application open in her browser, that browser will have made a request for updates and be waiting for a response to that request. When Bob submits a talk on Extreme Downhill Unicycling, the server will notice that Alice is waiting for updates and send information about the new talk as a response to her pending request. Alice’s browser will receive the data and update the screen to show the talk."
          ]
        },
        {
          "element": "p",
          "content": [
            "To prevent connections from timing out (being aborted because of a lack of activity), long-polling techniques usually set a maximum time for each request, after which the server will respond anyway, even though it has nothing to report, and the client will start a new request. Periodically restarting the request also makes the technique more robust, allowing clients to recover from temporary connection failures or server problems."
          ]
        },
        {
          "element": "p",
          "content": [
            "A busy server that is using long polling may have thousands of waiting requests, and thus TCP connections, open. Node, which makes it easy to manage many connections without creating a separate thread of control for each one, is a good fit for such a system."
          ]
        }
      ],
      "title": "Long polling"
    },
    {
      "element": "section",
      "content": [
        {
          "element": "p",
          "content": [
            "Before we start fleshing out either the server or the client, let’s think about the point where they touch: the HTTP interface over which they communicate."
          ]
        },
        {
          "element": "p",
          "content": [
            " We will base our interface on JSON, and like in the file server from ",
            {
              "element": "reference",
              "content": "Chapter 20"
            },
            ", we’ll try to make good use of HTTP methods. The interface is centered around the ",
            {
              "element": "literal",
              "content": [
                "/talks"
              ]
            },
            " path. Paths that do not start with ",
            {
              "element": "literal",
              "content": [
                "/talks"
              ]
            },
            " will be used for serving static files—the HTML and JavaScript code that implements the client-side system."
          ]
        },
        {
          "element": "p",
          "content": [
            "A ",
            {
              "element": "literal",
              "content": [
                "GET"
              ]
            },
            " request to ",
            {
              "element": "literal",
              "content": [
                "/talks"
              ]
            },
            " returns a JSON document like this:"
          ]
        },
        {
          "element": "listing",
          "numbered": false,
          "content": []
        },
        {
          "element": "p",
          "content": [
            "The ",
            {
              "element": "literal",
              "content": [
                "serverTime"
              ]
            },
            " field will be used to make reliable long polling possible. I will return to it ",
            {
              "element": "reference",
              "content": "later"
            },
            "."
          ]
        },
        {
          "element": "p",
          "content": [
            "Creating a new talk is done by making a ",
            {
              "element": "literal",
              "content": [
                "PUT"
              ]
            },
            " request to a URL like ",
            {
              "element": "literal",
              "content": [
                "/talks/Unituning"
              ]
            },
            ", where the part after the second slash is the title of the talk. The ",
            {
              "element": "literal",
              "content": [
                "PUT"
              ]
            },
            " request’s body should contain a JSON object that has ",
            {
              "element": "literal",
              "content": [
                "presenter"
              ]
            },
            " and ",
            {
              "element": "literal",
              "content": [
                "summary"
              ]
            },
            " properties."
          ]
        },
        {
          "element": "p",
          "content": [
            " Since talk titles may contain spaces and other characters that may not appear normally in a URL, title strings must be encoded with the ",
            {
              "element": "literal",
              "content": [
                "encodeURIComponent"
              ]
            },
            " function when building up such a URL."
          ]
        },
        {
          "element": "listing",
          "numbered": false,
          "content": []
        },
        {
          "element": "p",
          "content": [
            "A request to create a talk about idling might look something like this:"
          ]
        },
        {
          "element": "listing",
          "numbered": false,
          "content": []
        },
        {
          "element": "p",
          "content": [
            "Such URLs also support ",
            {
              "element": "literal",
              "content": [
                "GET"
              ]
            },
            " requests to retrieve the JSON representation of a talk and ",
            {
              "element": "literal",
              "content": [
                "DELETE"
              ]
            },
            " requests to delete a talk."
          ]
        },
        {
          "element": "p",
          "content": [
            "Adding a comment to a talk is done with a ",
            {
              "element": "literal",
              "content": [
                "POST"
              ]
            },
            " request to a URL like ",
            {
              "element": "literal",
              "content": [
                "/talks/Unituning/comments"
              ]
            },
            ", with a JSON object that has ",
            {
              "element": "literal",
              "content": [
                "author"
              ]
            },
            " and ",
            {
              "element": "literal",
              "content": [
                "message"
              ]
            },
            " properties as the body of the request."
          ]
        },
        {
          "element": "listing",
          "numbered": false,
          "content": []
        },
        {
          "element": "p",
          "content": [
            "To support long polling, ",
            {
              "element": "literal",
              "content": [
                "GET"
              ]
            },
            " requests to ",
            {
              "element": "literal",
              "content": [
                "/talks"
              ]
            },
            " may include a query parameter called ",
            {
              "element": "literal",
              "content": [
                "changesSince"
              ]
            },
            ", which is used to indicate that the client is interested in updates that happened since a given point in time. When there are such changes, they are immediately returned. When there aren’t, the response is delayed until something happens or until a given time period (we will use 90 seconds) has elapsed."
          ]
        },
        {
          "element": "p",
          "content": [
            "The time must be indicated as the number of milliseconds elapsed since the start of 1970, the same type of number that is returned by ",
            {
              "element": "literal",
              "content": [
                "Date.now()"
              ]
            },
            ". To ensure that it receives all updates and doesn’t receive the same update more than once, the client must pass the time at which it last received information from the server. The server’s clock might not be exactly in sync with the client’s clock, and even if it were, it would be impossible for the client to know the precise time at which the server sent a response because transferring data over the network takes time."
          ]
        },
        {
          "element": "p",
          "content": [
            "This is the reason for the existence of the ",
            {
              "element": "literal",
              "content": [
                "serverTime"
              ]
            },
            " property in responses sent to ",
            {
              "element": "literal",
              "content": [
                "GET"
              ]
            },
            " requests to ",
            {
              "element": "literal",
              "content": [
                "/talks"
              ]
            },
            ". That property tells the client the precise time, from the server’s perspective, at which the data it receives was created. The client can then simply store this time and pass it along in its next polling request to make sure that it receives exactly the updates that it has not seen before."
          ]
        },
        {
          "element": "pre",
          "content": "GET /talks?changesSince=1405438911833 HTTP/1.1\n\n(time passes)\n\nHTTP/1.1 200 OK\nContent-Type: application/json\nContent-Length: 95\n\n{\"serverTime\": 1405438913401,\n \"talks\": [{\"title\": \"Unituning\",\n            \"deleted\": true}]}"
        },
        {
          "element": "p",
          "content": [
            "When a talk has been changed, has been newly created, or has a comment added, the full representation of the talk is included in the response to the client’s next polling request. When a talk is deleted, only its title and the property ",
            {
              "element": "literal",
              "content": [
                "deleted"
              ]
            },
            " are included. The client can then add talks with titles it has not seen before to its display, update talks that it was already showing, and remove those that were deleted."
          ]
        },
        {
          "element": "p",
          "content": [
            "The protocol described in this chapter does not do any access control. Everybody can comment, modify talks, and even delete them. Since the Internet is filled with hooligans, putting such a system online without further protection is likely to end in disaster."
          ]
        },
        {
          "element": "p",
          "content": [
            "A simple solution would be to put the system behind a ",
            {
              "element": "em",
              "content": [
                "reverse proxy"
              ]
            },
            ", which is an HTTP server that accepts connections from outside the system and forwards them to HTTP servers that are running locally. Such a proxy can be configured to require a username and password, and you could make sure only the participants in the skill-sharing group have this password."
          ]
        }
      ],
      "title": "HTTP interface"
    },
    {
      "element": "section",
      "content": [
        {
          "element": "p",
          "content": [
            "Let’s start by writing the server-side part of the program. The code in this section runs on Node.js."
          ]
        },
        {
          "element": "section",
          "content": [
            {
              "element": "p",
              "content": [
                " Our server will use ",
                {
                  "element": "literal",
                  "content": [
                    "http.createServer"
                  ]
                },
                " to start an HTTP server. In the function that handles a new request, we must distinguish between the various kinds of requests (as determined by the method and the path) that we support. This can be done with a long chain of ",
                {
                  "element": "literal",
                  "content": [
                    "if"
                  ]
                },
                " statements, but there is a nicer way."
              ]
            },
            {
              "element": "p",
              "content": [
                "A ",
                {
                  "element": "em",
                  "content": [
                    "router"
                  ]
                },
                " is a component that helps dispatch a request to the function that can handle it. You can tell the router, for example, that ",
                {
                  "element": "literal",
                  "content": [
                    "PUT"
                  ]
                },
                " requests with a path that matches the regular expression ",
                {
                  "element": "literal",
                  "content": [
                    "/^\\/talks\\/([^\\/]+)$/"
                  ]
                },
                " (which matches ",
                {
                  "element": "literal",
                  "content": [
                    "/talks/"
                  ]
                },
                " followed by a talk title) can be handled by a given function. In addition, it can help extract the meaningful parts of the path, in this case the talk title, wrapped in parentheses in the regular expression and pass those to the handler function."
              ]
            },
            {
              "element": "p",
              "content": [
                "There are a number of good router packages on NPM, but here we will write one ourselves to illustrate the principle."
              ]
            },
            {
              "element": "p",
              "content": [
                "This is ",
                {
                  "element": "literal",
                  "content": [
                    "router.js"
                  ]
                },
                ", which we will later ",
                {
                  "element": "literal",
                  "content": [
                    "require"
                  ]
                },
                " from our server module:"
              ]
            },
            {
              "element": "listing",
              "numbered": false,
              "content": []
            },
            {
              "element": "p",
              "content": [
                "The module exports the ",
                {
                  "element": "literal",
                  "content": [
                    "Router"
                  ]
                },
                " constructor. A router object allows new handlers to be registered with the ",
                {
                  "element": "literal",
                  "content": [
                    "add"
                  ]
                },
                " method and can resolve requests with its ",
                {
                  "element": "literal",
                  "content": [
                    "resolve"
                  ]
                },
                " method."
              ]
            },
            {
              "element": "p",
              "content": [
                "The latter will return a Boolean that indicates whether a handler was found. The ",
                {
                  "element": "literal",
                  "content": [
                    "some"
                  ]
                },
                " method on the array of routes will try the routes one at a time (in the order in which they were defined) and stop, returning ",
                {
                  "element": "literal",
                  "content": [
                    "true"
                  ]
                },
                ", when a matching one is found."
              ]
            },
            {
              "element": "p",
              "content": [
                " The handler functions are called with the ",
                {
                  "element": "literal",
                  "content": [
                    "request"
                  ]
                },
                " and ",
                {
                  "element": "literal",
                  "content": [
                    "response"
                  ]
                },
                " objects. When the regular expression that matches the URL contains any groups, the strings they match are passed to the handler as extra arguments. These strings have to be URL-decoded since the raw URL contains ",
                {
                  "element": "literal",
                  "content": [
                    "%20"
                  ]
                },
                "-style codes."
              ]
            }
          ],
          "title": "Routing"
        },
        {
          "element": "section",
          "content": [
            {
              "element": "p",
              "content": [
                "When a request matches none of the request types defined in our router, the server must interpret it as a request for a file in the ",
                {
                  "element": "literal",
                  "content": [
                    "public"
                  ]
                },
                " directory. It would be possible to use the file server defined in ",
                {
                  "element": "reference",
                  "content": "Chapter 20"
                },
                " to serve such files, but we neither need nor want to support ",
                {
                  "element": "literal",
                  "content": [
                    "PUT"
                  ]
                },
                " and ",
                {
                  "element": "literal",
                  "content": [
                    "DELETE"
                  ]
                },
                " requests on files, and we would like to have advanced features such as support for caching. So let’s use a solid, well-tested static file server from NPM instead."
              ]
            },
            {
              "element": "p",
              "content": [
                "I opted for ",
                {
                  "element": "literal",
                  "content": [
                    "ecstatic"
                  ]
                },
                ". This isn’t the only such server on NPM, but it works well and fits our purposes. The ",
                {
                  "element": "literal",
                  "content": [
                    "ecstatic"
                  ]
                },
                " module exports a function that can be called with a configuration object to produce a request handler function. We use the ",
                {
                  "element": "literal",
                  "content": [
                    "root"
                  ]
                },
                " option to tell the server where it should look for files. The handler function accepts ",
                {
                  "element": "literal",
                  "content": [
                    "request"
                  ]
                },
                " and ",
                {
                  "element": "literal",
                  "content": [
                    "response"
                  ]
                },
                " parameters and can be passed directly to ",
                {
                  "element": "literal",
                  "content": [
                    "createServer"
                  ]
                },
                " to create a server that serves ",
                {
                  "element": "em",
                  "content": [
                    "only"
                  ]
                },
                " files. We want to first check for requests that we handle specially, though, so we wrap it in another function."
              ]
            },
            {
              "element": "listing",
              "numbered": false,
              "content": []
            },
            {
              "element": "p",
              "content": [
                "The ",
                {
                  "element": "literal",
                  "content": [
                    "respond"
                  ]
                },
                " and ",
                {
                  "element": "literal",
                  "content": [
                    "respondJSON"
                  ]
                },
                " helper functions are used throughout the server code to send off responses with a single function call."
              ]
            },
            {
              "element": "listing",
              "numbered": false,
              "content": []
            }
          ],
          "title": "Serving files"
        },
        {
          "element": "section",
          "content": [
            {
              "element": "p",
              "content": [
                "The server keeps the talks that have been proposed in an object called ",
                {
                  "element": "literal",
                  "content": [
                    "talks"
                  ]
                },
                ", whose property names are the talk titles. These will be exposed as HTTP resources under ",
                {
                  "element": "literal",
                  "content": [
                    "/talks/[title]"
                  ]
                },
                ", so we need to add handlers to our router that implement the various methods that clients can use to work with them."
              ]
            },
            {
              "element": "p",
              "content": [
                "The handler for requests that ",
                {
                  "element": "literal",
                  "content": [
                    "GET"
                  ]
                },
                " a single talk must look up the talk and respond either with the talk’s JSON data or with a 404 error response."
              ]
            },
            {
              "element": "listing",
              "numbered": false,
              "content": []
            },
            {
              "element": "p",
              "content": [
                "Deleting a talk is done by removing it from the ",
                {
                  "element": "literal",
                  "content": [
                    "talks"
                  ]
                },
                " object."
              ]
            },
            {
              "element": "listing",
              "numbered": false,
              "content": []
            },
            {
              "element": "p",
              "content": [
                "The ",
                {
                  "element": "literal",
                  "content": [
                    "registerChange"
                  ]
                },
                " function, which we will define ",
                {
                  "element": "reference",
                  "content": "later"
                },
                ", notifies waiting long-polling requests about the change."
              ]
            },
            {
              "element": "p",
              "content": [
                "To retrieve the content of JSON-encoded request bodies, we define a function called ",
                {
                  "element": "literal",
                  "content": [
                    "readStreamAsJSON"
                  ]
                },
                ", which reads all content from a stream, parses it as JSON, and then calls a callback function."
              ]
            },
            {
              "element": "listing",
              "numbered": false,
              "content": []
            },
            {
              "element": "p",
              "content": [
                "One handler that needs to read JSON responses is the ",
                {
                  "element": "literal",
                  "content": [
                    "PUT"
                  ]
                },
                " handler, which is used to create new talks. It has to check whether the data it was given has ",
                {
                  "element": "literal",
                  "content": [
                    "presenter"
                  ]
                },
                " and ",
                {
                  "element": "literal",
                  "content": [
                    "summary"
                  ]
                },
                " properties, which are strings. Any data coming from outside the system might be nonsense, and we don’t want to corrupt our internal data model, or even crash, when bad requests come in."
              ]
            },
            {
              "element": "p",
              "content": [
                "If the data looks valid, the handler stores an object that represents the new talk in the ",
                {
                  "element": "literal",
                  "content": [
                    "talks"
                  ]
                },
                " object, possibly overwriting an existing talk with this title, and again calls ",
                {
                  "element": "literal",
                  "content": [
                    "registerChange"
                  ]
                },
                "."
              ]
            },
            {
              "element": "listing",
              "numbered": false,
              "content": []
            },
            {
              "element": "p",
              "content": [
                "Adding a comment to a talk works similarly. We use ",
                {
                  "element": "literal",
                  "content": [
                    "readStreamAsJSON"
                  ]
                },
                " to get the content of the request, validate the resulting data, and store it as a comment when it looks valid."
              ]
            },
            {
              "element": "listing",
              "numbered": false,
              "content": []
            },
            {
              "element": "p",
              "content": [
                "Trying to add a comment to a nonexistent talk should return a 404 error, of course."
              ]
            }
          ],
          "title": "Talks as resources"
        },
        {
          "element": "section",
          "content": [
            {
              "element": "p",
              "content": [
                "The most interesting aspect of the server is the part that handles long polling. When a ",
                {
                  "element": "literal",
                  "content": [
                    "GET"
                  ]
                },
                " request comes in for ",
                {
                  "element": "literal",
                  "content": [
                    "/talks"
                  ]
                },
                ", it can be either a simple request for all talks or a request for updates, with a ",
                {
                  "element": "literal",
                  "content": [
                    "changesSince"
                  ]
                },
                " parameter."
              ]
            },
            {
              "element": "p",
              "content": [
                "There will be various situations in which we have to send a list of talks to the client, so we first define a small helper function that attaches the ",
                {
                  "element": "literal",
                  "content": [
                    "serverTime"
                  ]
                },
                " field to such responses."
              ]
            },
            {
              "element": "listing",
              "numbered": false,
              "content": []
            },
            {
              "element": "p",
              "content": [
                "The handler itself needs to look at the query parameters in the request’s URL to see whether a ",
                {
                  "element": "literal",
                  "content": [
                    "changesSince"
                  ]
                },
                " parameter is given. If you give the ",
                {
                  "element": "literal",
                  "content": [
                    "\"url\""
                  ]
                },
                " module’s ",
                {
                  "element": "literal",
                  "content": [
                    "parse"
                  ]
                },
                " function a second argument of ",
                {
                  "element": "literal",
                  "content": [
                    "true"
                  ]
                },
                ", it will also parse the query part of a URL. The object it returns will have a ",
                {
                  "element": "literal",
                  "content": [
                    "query"
                  ]
                },
                " property, which holds another object that maps parameter names to values."
              ]
            },
            {
              "element": "listing",
              "numbered": false,
              "content": []
            },
            {
              "element": "p",
              "content": [
                "When the ",
                {
                  "element": "literal",
                  "content": [
                    "changesSince"
                  ]
                },
                " parameter is missing, the handler simply builds up a list of all talks and returns that."
              ]
            },
            {
              "element": "p",
              "content": [
                "Otherwise, the ",
                {
                  "element": "literal",
                  "content": [
                    "changesSince"
                  ]
                },
                " parameter first has to be checked to make sure that it is a valid number. The ",
                {
                  "element": "literal",
                  "content": [
                    "getChangedTalks"
                  ]
                },
                " function, to be defined shortly, returns an array of changed talks since a given point in time. If it returns an empty array, the server does not yet have anything to send back to the client, so it stores the response object (using ",
                {
                  "element": "literal",
                  "content": [
                    "waitForChanges"
                  ]
                },
                ") to be responded to at a later time."
              ]
            },
            {
              "element": "listing",
              "numbered": false,
              "content": []
            },
            {
              "element": "p",
              "content": [
                "  The ",
                {
                  "element": "literal",
                  "content": [
                    "splice"
                  ]
                },
                " method is used to cut a piece out of an array. You give it an index and a number of elements, and it ",
                {
                  "element": "em",
                  "content": [
                    "mutates"
                  ]
                },
                " the array, removing that many elements after the given index. In this case, we remove a single element, the object that tracks the waiting response, whose index we found by calling ",
                {
                  "element": "literal",
                  "content": [
                    "indexOf"
                  ]
                },
                ". If you pass additional arguments to ",
                {
                  "element": "literal",
                  "content": [
                    "splice"
                  ]
                },
                ", their values will be inserted into the array at the given position, replacing the removed elements."
              ]
            },
            {
              "element": "p",
              "content": [
                "When a response object is stored in the ",
                {
                  "element": "literal",
                  "content": [
                    "waiting"
                  ]
                },
                " array, a timeout is immediately set. After 90 seconds, this timeout sees whether the request is still waiting and, if it is, sends an empty response and removes it from the ",
                {
                  "element": "literal",
                  "content": [
                    "waiting"
                  ]
                },
                " array."
              ]
            },
            {
              "element": "p",
              "content": [
                "To be able to find exactly those talks that have been changed since a given point in time, we need to keep track of the history of changes. Registering a change with ",
                {
                  "element": "literal",
                  "content": [
                    "registerChange"
                  ]
                },
                " will remember that change, along with the current time, in an array called ",
                {
                  "element": "literal",
                  "content": [
                    "changes"
                  ]
                },
                ". When a change occurs, that means there is new data, so all waiting requests can be responded to immediately."
              ]
            },
            {
              "element": "listing",
              "numbered": false,
              "content": []
            },
            {
              "element": "p",
              "content": [
                "Finally, ",
                {
                  "element": "literal",
                  "content": [
                    "getChangedTalks"
                  ]
                },
                " uses the ",
                {
                  "element": "literal",
                  "content": [
                    "changes"
                  ]
                },
                " array to build up an array of changed talks, including objects with a ",
                {
                  "element": "literal",
                  "content": [
                    "deleted"
                  ]
                },
                " property for talks that no longer exist. When building that array, ",
                {
                  "element": "literal",
                  "content": [
                    "getChangedTalks"
                  ]
                },
                " has to ensure that it doesn’t include the same talk twice since there might have been multiple changes to a talk since the given time."
              ]
            },
            {
              "element": "listing",
              "numbered": false,
              "content": []
            },
            {
              "element": "p",
              "content": [
                "That concludes the server code. Running the program defined so far will get you a server running on port 8000, which serves files from the ",
                {
                  "element": "literal",
                  "content": [
                    "public"
                  ]
                },
                " subdirectory alongside a talk-managing interface under the ",
                {
                  "element": "literal",
                  "content": [
                    "/talks"
                  ]
                },
                " URL."
              ]
            }
          ],
          "title": "Long-polling support"
        }
      ],
      "title": "The server"
    },
    {
      "element": "section",
      "content": [
        {
          "element": "p",
          "content": [
            "The client-side part of the talk-managing website consists of three files: an HTML page, a style sheet, and a JavaScript file."
          ]
        },
        {
          "element": "section",
          "content": [
            {
              "element": "p",
              "content": [
                "It is a widely used convention for web servers to try to serve a file named ",
                {
                  "element": "literal",
                  "content": [
                    "index.html"
                  ]
                },
                " when a request is made directly to a path that corresponds to a directory. The file server module we use, ",
                {
                  "element": "literal",
                  "content": [
                    "ecstatic"
                  ]
                },
                ", supports this convention. When a request is made to the path ",
                {
                  "element": "literal",
                  "content": [
                    "/"
                  ]
                },
                ", the server looks for the file ",
                {
                  "element": "literal",
                  "content": [
                    "./public/index.html"
                  ]
                },
                " (",
                {
                  "element": "literal",
                  "content": [
                    "./public"
                  ]
                },
                " being the root we gave it) and returns that file if found."
              ]
            },
            {
              "element": "p",
              "content": [
                "Thus, if we want a page to show up when a browser is pointed at our server, we should put it in ",
                {
                  "element": "literal",
                  "content": [
                    "public/index.html"
                  ]
                },
                ". This is how our index file starts:"
              ]
            },
            {
              "element": "listing",
              "numbered": false,
              "content": []
            },
            {
              "element": "p",
              "content": [
                "It defines the document title and includes a style sheet, which defines a few styles to, among other things, add a border around talks. Then it adds a heading and a name field. The user is expected to put their name in the latter so that it can be attached to talks and comments they submit."
              ]
            },
            {
              "element": "p",
              "content": [
                "The ",
                {
                  "element": "literal",
                  "content": [
                    "<",
                    "div",
                    ">"
                  ]
                },
                " element with the ID ",
                {
                  "element": "literal",
                  "content": [
                    "\"talks\""
                  ]
                },
                " will contain the current list of talks. The script fills the list in when it receives talks from the server."
              ]
            },
            {
              "element": "p",
              "content": [
                "Next comes the form that is used to create a new talk."
              ]
            },
            {
              "element": "listing",
              "numbered": false,
              "content": []
            },
            {
              "element": "p",
              "content": [
                "The script will add a ",
                {
                  "element": "literal",
                  "content": [
                    "\"submit\""
                  ]
                },
                " event handler to this form, from which it can make the HTTP request that tells the server about the talk."
              ]
            },
            {
              "element": "p",
              "content": [
                "Next comes a rather mysterious block, which has its ",
                {
                  "element": "literal",
                  "content": [
                    "display"
                  ]
                },
                " style set to ",
                {
                  "element": "literal",
                  "content": [
                    "none"
                  ]
                },
                ", preventing it from actually showing up on the page. Can you guess what it is for?"
              ]
            },
            {
              "element": "listing",
              "numbered": false,
              "content": []
            },
            {
              "element": "p",
              "content": [
                "Creating complicated DOM structures with JavaScript code produces ugly code. You can make the code slightly better by introducing helper functions like the ",
                {
                  "element": "literal",
                  "content": [
                    "elt"
                  ]
                },
                " function from ",
                {
                  "element": "reference",
                  "content": "Chapter 13"
                },
                ", but the result will still look worse than HTML, which can be thought of as a domain-specific language for expressing DOM structures."
              ]
            },
            {
              "element": "p",
              "content": [
                " To create DOM structures for the talks, our program will define a simple ",
                {
                  "element": "em",
                  "content": [
                    "templating"
                  ]
                },
                " system, which uses hidden DOM structures included in the document to instantiate new DOM structures, replacing the placeholders between double braces with the values of a specific talk."
              ]
            },
            {
              "element": "p",
              "content": [
                "Finally, the HTML document includes the script file that contains the client-side code."
              ]
            },
            {
              "element": "listing",
              "numbered": false,
              "content": []
            }
          ],
          "title": "HTML"
        },
        {
          "element": "section",
          "content": [
            {
              "element": "p",
              "content": [
                "The first thing the client has to do when the page is loaded is ask the server for the current set of talks. Since we are going to make a lot of HTTP requests, we will again define a small wrapper around ",
                {
                  "element": "literal",
                  "content": [
                    "XMLHttpRequest"
                  ]
                },
                ", which accepts an object to configure the request as well as a callback to call when the request finishes."
              ]
            },
            {
              "element": "listing",
              "numbered": false,
              "content": []
            },
            {
              "element": "p",
              "content": [
                "The initial request displays the talks it receives on the screen and starts the long-polling process by calling ",
                {
                  "element": "literal",
                  "content": [
                    "waitForChanges"
                  ]
                },
                "."
              ]
            },
            {
              "element": "listing",
              "numbered": false,
              "content": []
            },
            {
              "element": "p",
              "content": [
                "The ",
                {
                  "element": "literal",
                  "content": [
                    "lastServerTime"
                  ]
                },
                " variable is used to track the time of the last update that was received from the server. After the initial request, the client’s view of the talks corresponds to the view that the server had when it responded to that request. Thus, the ",
                {
                  "element": "literal",
                  "content": [
                    "serverTime"
                  ]
                },
                " property included in the response provides an appropriate initial value for ",
                {
                  "element": "literal",
                  "content": [
                    "lastServerTime"
                  ]
                },
                "."
              ]
            },
            {
              "element": "p",
              "content": [
                "When the request fails, we don’t want to have our page just sit there, doing nothing without explanation. So we define a simple function called ",
                {
                  "element": "literal",
                  "content": [
                    "reportError"
                  ]
                },
                ", which at least shows the user a dialog that tells them something went wrong."
              ]
            },
            {
              "element": "listing",
              "numbered": false,
              "content": []
            },
            {
              "element": "p",
              "content": [
                "The function checks whether there ",
                {
                  "element": "em",
                  "content": [
                    "is"
                  ]
                },
                " an actual error, and it alerts only when there is one. That way, we can also directly pass this function to ",
                {
                  "element": "literal",
                  "content": [
                    "request"
                  ]
                },
                " for requests where we can ignore the response. This makes sure that if the request fails, the error is reported to the user."
              ]
            }
          ],
          "title": "Starting up"
        },
        {
          "element": "section",
          "content": [
            {
              "element": "p",
              "content": [
                "To be able to update the view of the talks when changes come in, the client must keep track of the talks that it is currently showing. That way, when a new version of a talk that is already on the screen comes in, the talk can be replaced (in place) with its updated form. Similarly, when information comes in that a talk is being deleted, the right DOM element can be removed from the document."
              ]
            },
            {
              "element": "p",
              "content": [
                "The function ",
                {
                  "element": "literal",
                  "content": [
                    "displayTalks"
                  ]
                },
                " is used both to build up the initial display and to update it when something changes. It will use the ",
                {
                  "element": "literal",
                  "content": [
                    "shownTalks"
                  ]
                },
                " object, which associates talk titles with DOM nodes, to remember the talks it currently has on the screen."
              ]
            },
            {
              "element": "listing",
              "numbered": false,
              "content": []
            },
            {
              "element": "p",
              "content": [
                "Building up the DOM structure for talks is done using the templates that were included in the HTML document. First, we must define ",
                {
                  "element": "literal",
                  "content": [
                    "instantiateTemplate"
                  ]
                },
                ", which looks up and fills in a template."
              ]
            },
            {
              "element": "p",
              "content": [
                "The ",
                {
                  "element": "literal",
                  "content": [
                    "name"
                  ]
                },
                " parameter is the template’s name. To look up the template element, we search for an element whose class name matches the template name, which is a child of the element with ID ",
                {
                  "element": "literal",
                  "content": [
                    "\"template\""
                  ]
                },
                ". Using the ",
                {
                  "element": "literal",
                  "content": [
                    "querySelector"
                  ]
                },
                " method makes this easy. There were templates named ",
                {
                  "element": "literal",
                  "content": [
                    "\"talk\""
                  ]
                },
                " and ",
                {
                  "element": "literal",
                  "content": [
                    "\"comment\""
                  ]
                },
                " in the HTML page."
              ]
            },
            {
              "element": "listing",
              "numbered": false,
              "content": []
            },
            {
              "element": "p",
              "content": [
                "The ",
                {
                  "element": "literal",
                  "content": [
                    "cloneNode"
                  ]
                },
                " method, which all DOM nodes have, creates a copy of a node. It won’t copy the node’s child nodes unless ",
                {
                  "element": "literal",
                  "content": [
                    "true"
                  ]
                },
                " is given as a first argument. The ",
                {
                  "element": "literal",
                  "content": [
                    "instantiate"
                  ]
                },
                " function recursively builds up a copy of the template, filling in the template as it goes."
              ]
            },
            {
              "element": "p",
              "content": [
                "The second argument to ",
                {
                  "element": "literal",
                  "content": [
                    "instantiateTemplate"
                  ]
                },
                " should be an object, whose properties hold the strings that are to be filled into the template. A placeholder like ",
                {
                  "element": "literal",
                  "content": [
                    "{{title}}"
                  ]
                },
                " will be replaced with the value of ",
                {
                  "element": "literal",
                  "content": [
                    "values"
                  ]
                },
                "’ ",
                {
                  "element": "literal",
                  "content": [
                    "title"
                  ]
                },
                " property."
              ]
            },
            {
              "element": "p",
              "content": [
                "This is a crude approach to templating, but it is enough to implement ",
                {
                  "element": "literal",
                  "content": [
                    "drawTalk"
                  ]
                },
                "."
              ]
            },
            {
              "element": "listing",
              "numbered": false,
              "content": []
            },
            {
              "element": "p",
              "content": [
                "After instantiating the ",
                {
                  "element": "literal",
                  "content": [
                    "\"talk\""
                  ]
                },
                " template, there are various things that need to be patched up. First, the comments have to be filled in by repeatedly instantiating the ",
                {
                  "element": "literal",
                  "content": [
                    "\"comment\""
                  ]
                },
                " template and appending the results to the node with class ",
                {
                  "element": "literal",
                  "content": [
                    "\"comments\""
                  ]
                },
                ". Next, event handlers have to be attached to the button that deletes the task and the form that adds a new comment."
              ]
            }
          ],
          "title": "Displaying talks"
        },
        {
          "element": "section",
          "content": [
            {
              "element": "p",
              "content": [
                "The event handlers registered by ",
                {
                  "element": "literal",
                  "content": [
                    "drawTalk"
                  ]
                },
                " call the function ",
                {
                  "element": "literal",
                  "content": [
                    "deleteTalk"
                  ]
                },
                " and ",
                {
                  "element": "literal",
                  "content": [
                    "addComment"
                  ]
                },
                " to perform the actual actions required to delete a talk or add a comment. These will need to build up URLs that refer to talks with a given title, for which we define the ",
                {
                  "element": "literal",
                  "content": [
                    "talkURL"
                  ]
                },
                " helper function."
              ]
            },
            {
              "element": "listing",
              "numbered": false,
              "content": []
            },
            {
              "element": "p",
              "content": [
                "The ",
                {
                  "element": "literal",
                  "content": [
                    "deleteTalk"
                  ]
                },
                " function fires off a ",
                {
                  "element": "literal",
                  "content": [
                    "DELETE"
                  ]
                },
                " request and reports the error when that fails."
              ]
            },
            {
              "element": "listing",
              "numbered": false,
              "content": []
            },
            {
              "element": "p",
              "content": [
                "Adding a comment requires building up a JSON representation of the comment and submitting that as part of a ",
                {
                  "element": "literal",
                  "content": [
                    "POST"
                  ]
                },
                " request."
              ]
            },
            {
              "element": "listing",
              "numbered": false,
              "content": []
            },
            {
              "element": "p",
              "content": [
                "The ",
                {
                  "element": "literal",
                  "content": [
                    "nameField"
                  ]
                },
                " variable used to set the comment’s ",
                {
                  "element": "literal",
                  "content": [
                    "author"
                  ]
                },
                " property is a reference to the ",
                {
                  "element": "literal",
                  "content": [
                    "<",
                    "input",
                    ">"
                  ]
                },
                " field at the top of the page that allows the user to specify their name. We also wire up that field to ",
                {
                  "element": "literal",
                  "content": [
                    "localStorage"
                  ]
                },
                " so that it does not have to be filled in again every time the page is reloaded."
              ]
            },
            {
              "element": "listing",
              "numbered": false,
              "content": []
            },
            {
              "element": "p",
              "content": [
                "The form at the bottom of the page, for proposing a new talk, gets a ",
                {
                  "element": "literal",
                  "content": [
                    "\"submit\""
                  ]
                },
                " event handler. This handler prevents the event’s default effect (which would cause a page reload), clears the form, and fires off a ",
                {
                  "element": "literal",
                  "content": [
                    "PUT"
                  ]
                },
                " request to create the talk."
              ]
            },
            {
              "element": "listing",
              "numbered": false,
              "content": []
            }
          ],
          "title": "Updating the server"
        },
        {
          "element": "section",
          "content": [
            {
              "element": "p",
              "content": [
                "I should point out that the various functions that change the state of the application by creating or deleting talks or adding a comment do absolutely nothing to ensure that the changes they make are visible on the screen. They simply tell the server and rely on the long-polling mechanism to trigger the appropriate updates to the page."
              ]
            },
            {
              "element": "p",
              "content": [
                "Given the mechanism that we implemented in our server and the way we defined ",
                {
                  "element": "literal",
                  "content": [
                    "displayTalks"
                  ]
                },
                " to handle updates of talks that are already on the page, the actual long polling is surprisingly simple."
              ]
            },
            {
              "element": "listing",
              "numbered": false,
              "content": []
            },
            {
              "element": "p",
              "content": [
                "This function is called once when the program starts up and then keeps calling itself to ensure that a polling request is always active. When the request fails, we don’t call ",
                {
                  "element": "literal",
                  "content": [
                    "reportError"
                  ]
                },
                " since popping up a dialog every time we fail to reach the server would get annoying when the server is down. Instead, the error is written to the console (to ease debugging), and another attempt is made 2.5 seconds later."
              ]
            },
            {
              "element": "p",
              "content": [
                "When the request succeeds, the new data is put onto the screen, and ",
                {
                  "element": "literal",
                  "content": [
                    "lastServerTime"
                  ]
                },
                " is updated to reflect the fact that we received data corresponding to this new point in time. The request is immediately restarted to wait for the next update."
              ]
            },
            {
              "element": "p",
              "content": [
                "If you run the server and open two browser windows for ",
                {
                  "element": "reference",
                  "content": [
                    {
                      "element": "em",
                      "content": [
                        "localhost:8000/"
                      ]
                    }
                  ]
                },
                " next to each other, you can see that the actions you perform in one window are immediately visible in the other."
              ]
            }
          ],
          "title": "Noticing changes"
        }
      ],
      "title": "The client"
    },
    {
      "element": "section",
      "content": [
        {
          "element": "p",
          "content": [
            "The following exercises will involve modifying the system defined in this chapter. To work on them, make sure you download the code first (",
            {
              "element": "reference",
              "content": [
                {
                  "element": "em",
                  "content": [
                    "eloquentjavascript.net/code/skillsharing.zip"
                  ]
                }
              ]
            },
            ") and have Node installed (",
            {
              "element": "reference",
              "content": [
                {
                  "element": "em",
                  "content": [
                    "nodejs.org"
                  ]
                }
              ]
            },
            ")."
          ]
        },
        {
          "element": "section",
          "content": [
            {
              "element": "p",
              "content": [
                "The skill-sharing server keeps its data purely in memory. This means that when it crashes or is restarted for any reason, all talks and comments are lost."
              ]
            },
            {
              "element": "p",
              "content": [
                "Extend the server so that it stores the talk data to disk and automatically reloads the data when it is restarted. Do not worry about efficiency—do the simplest thing that works."
              ]
            },
            {
              "element": "p",
              "content": [
                "The simplest solution I can come up with is to encode the whole ",
                {
                  "element": "literal",
                  "content": [
                    "talks"
                  ]
                },
                " object as JSON and dump it to a file with ",
                {
                  "element": "literal",
                  "content": [
                    "fs.writeFile"
                  ]
                },
                ". There is already a function (",
                {
                  "element": "literal",
                  "content": [
                    "registerChange"
                  ]
                },
                ") that is called every time the server’s data changes. It can be extended to write the new data to disk."
              ]
            },
            {
              "element": "p",
              "content": [
                "Pick a filename, for example ",
                {
                  "element": "literal",
                  "content": [
                    "./talks.json"
                  ]
                },
                ". When the server starts, it can try to read that file with ",
                {
                  "element": "literal",
                  "content": [
                    "fs.readFile"
                  ]
                },
                ", and if that succeeds, the server can use the file’s contents as its starting data."
              ]
            },
            {
              "element": "p",
              "content": [
                "Beware, though. The ",
                {
                  "element": "literal",
                  "content": [
                    "talks"
                  ]
                },
                " object started as a prototype-less object so that the ",
                {
                  "element": "literal",
                  "content": [
                    "in"
                  ]
                },
                " operator could be sanely used. ",
                {
                  "element": "literal",
                  "content": [
                    "JSON.parse"
                  ]
                },
                " will return regular objects with ",
                {
                  "element": "literal",
                  "content": [
                    "Object.prototype"
                  ]
                },
                " as their prototype. If you use JSON as your file format, you’ll have to copy the properties of the object returned by ",
                {
                  "element": "literal",
                  "content": [
                    "JSON.parse"
                  ]
                },
                " into a new, prototype-less object."
              ]
            }
          ],
          "title": "Disk persistence"
        },
        {
          "element": "section",
          "content": [
            {
              "element": "p",
              "content": [
                "The wholesale redrawing of talks works pretty well because you usually can’t tell the difference between a DOM node and its identical replacement. But there are exceptions. If you start typing something in the comment field for a talk in one browser window and then, in another, add a comment to that talk, the field in the first window will be redrawn, removing both its content and its focus."
              ]
            },
            {
              "element": "p",
              "content": [
                "In a heated discussion, where multiple people are adding comments to a single talk, this would be very annoying. Can you come up with a way to avoid it?"
              ]
            },
            {
              "element": "p",
              "content": [
                "The ad hoc approach is to simply store the state of a talk’s comment field (its content and whether it is focused) before redrawing the talk and then reset the field to its old state afterward."
              ]
            },
            {
              "element": "p",
              "content": [
                " Another solution would be to not simply replace the old DOM structure with the new one but recursively compare them, node by node, and update only the parts that actually changed. This is a lot harder to implement, but it’s more general and continues working even if we add another text field."
              ]
            }
          ],
          "title": "Comment field resets"
        },
        {
          "element": "section",
          "content": [
            {
              "element": "p",
              "content": [
                "Most templating systems do more than just fill in some strings. At the very least, they also allow conditional inclusion of parts of the template, analogous to ",
                {
                  "element": "literal",
                  "content": [
                    "if"
                  ]
                },
                " statements, and repetition of parts of a template, similar to a loop."
              ]
            },
            {
              "element": "p",
              "content": [
                "If we were able to repeat a piece of template for each element in an array, we would not need the second template (",
                {
                  "element": "literal",
                  "content": [
                    "\"comment\""
                  ]
                },
                "). Rather, we could specify the ",
                {
                  "element": "literal",
                  "content": [
                    "\"talk\""
                  ]
                },
                " template to loop over the array held in a talk’s ",
                {
                  "element": "literal",
                  "content": [
                    "comments"
                  ]
                },
                " property and render the nodes that make up a comment for every element in the array."
              ]
            },
            {
              "element": "p",
              "content": [
                "It could look like this:"
              ]
            },
            {
              "element": "listing",
              "numbered": false,
              "content": []
            },
            {
              "element": "p",
              "content": [
                "The idea is that whenever a node with a ",
                {
                  "element": "literal",
                  "content": [
                    "template-repeat"
                  ]
                },
                " attribute is found during template instantiation, the instantiating code loops over the array held in the property named by that attribute. For each element in the array, it adds an instance of the node. The template’s context (the ",
                {
                  "element": "literal",
                  "content": [
                    "values"
                  ]
                },
                " variable in ",
                {
                  "element": "literal",
                  "content": [
                    "instantiateTemplate"
                  ]
                },
                ") would, during this loop, point at the current element of the array so that ",
                {
                  "element": "literal",
                  "content": [
                    "{{author}}"
                  ]
                },
                " would be looked up in the comment object rather than in the original context (the talk)."
              ]
            },
            {
              "element": "p",
              "content": [
                "Rewrite ",
                {
                  "element": "literal",
                  "content": [
                    "instantiateTemplate"
                  ]
                },
                " to implement this and then change the templates to use this feature and remove the explicit rendering of comments from the ",
                {
                  "element": "literal",
                  "content": [
                    "drawTalk"
                  ]
                },
                " function."
              ]
            },
            {
              "element": "p",
              "content": [
                "How would you add conditional instantiation of nodes, making it possible to omit parts of the template when a given value is true or false?"
              ]
            },
            {
              "element": "p",
              "content": [
                "You could change ",
                {
                  "element": "literal",
                  "content": [
                    "instantiateTemplate"
                  ]
                },
                " so that its inner function takes not just a node but also a current context as an argument. You can then, when looping over a node’s child nodes, check whether the child has a ",
                {
                  "element": "literal",
                  "content": [
                    "template-repeat"
                  ]
                },
                " attribute. If it does, don’t instantiate it once but instead loop over the array indicated by the attribute’s value and instantiate it once for every element in the array, passing the current array element as context."
              ]
            },
            {
              "element": "p",
              "content": [
                "Conditionals can be implemented in a similar way, with attributes called, for example, ",
                {
                  "element": "literal",
                  "content": [
                    "template-when"
                  ]
                },
                " and ",
                {
                  "element": "literal",
                  "content": [
                    "template-unless"
                  ]
                },
                ", which cause a node to be instantiated only when a given property is true (or false)."
              ]
            }
          ],
          "title": "Better templates"
        },
        {
          "element": "section",
          "content": [
            {
              "element": "p",
              "content": [
                " When someone visits our website with a browser that has JavaScript disabled or is simply not capable of displaying JavaScript, they will get a completely broken, inoperable page. This is not nice."
              ]
            },
            {
              "element": "p",
              "content": [
                "Some types of web applications really can’t be done without JavaScript. For others, you just don’t have the budget or patience to bother about clients that can’t run scripts. But for pages with a wide audience, it is polite to support scriptless users."
              ]
            },
            {
              "element": "p",
              "content": [
                "Try to think of a way the skill-sharing website could be set up to preserve basic functionality when run without JavaScript. The automatic updates will have to go, and people will have to refresh their page the old-fashioned way. But being able to see existing talks, create new ones, and submit comments would be nice."
              ]
            },
            {
              "element": "p",
              "content": [
                "Don’t feel obliged to actually implement this. Outlining a solution is enough. Does the revised approach strike you as more or less elegant than what we did initially?"
              ]
            },
            {
              "element": "p",
              "content": [
                "Two central aspects of the approach taken in this chapter—a clean HTTP interface and client-side template rendering—don’t work without JavaScript. Normal HTML forms can send ",
                {
                  "element": "literal",
                  "content": [
                    "GET"
                  ]
                },
                " and ",
                {
                  "element": "literal",
                  "content": [
                    "POST"
                  ]
                },
                " requests but not ",
                {
                  "element": "literal",
                  "content": [
                    "PUT"
                  ]
                },
                " or ",
                {
                  "element": "literal",
                  "content": [
                    "DELETE"
                  ]
                },
                " requests and can send their data only to a fixed URL."
              ]
            },
            {
              "element": "p",
              "content": [
                "Thus, the server would have to be revised to accept comments, new talks, and deleted talks through ",
                {
                  "element": "literal",
                  "content": [
                    "POST"
                  ]
                },
                " requests, whose bodies aren’t JSON but rather use the URL-encoded format that HTML forms use (see ",
                {
                  "element": "reference",
                  "content": "Chapter 17"
                },
                "). These requests would have to return the full new page so that users see the new state of the site after they make a change. This would not be too hard to engineer and could be implemented alongside the “clean” HTTP interface."
              ]
            },
            {
              "element": "p",
              "content": [
                "The code for rendering talks would have to be duplicated on the server. The ",
                {
                  "element": "literal",
                  "content": [
                    "index.html"
                  ]
                },
                " file, rather than being a static file, would have to be generated dynamically by adding a handler for it to the router. That way, it already includes the current talks and comments when it gets served."
              ]
            }
          ],
          "title": "The unscriptables"
        }
      ],
      "title": "Exercises"
    }
  ],
  "title": "Project: Skill-Sharing Website"
}

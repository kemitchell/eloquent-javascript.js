{
  "content": [
    {
      "element": "p",
      "content": [
        "When you open a web page in your browser, the browser retrieves the page’s HTML text and parses it, much like the way our parser from ",
        {
          "element": "reference",
          "content": [
            "Chapter 11"
          ]
        },
        " parsed programs. The browser builds up a model of the document’s structure and then uses this model to draw the page on the screen."
      ]
    },
    {
      "element": "p",
      "content": [
        "This representation of the document is one of the toys that a JavaScript program has available in its sandbox. You can read from the model and also change it. It acts as a ",
        {
          "element": "em",
          "content": [
            "live"
          ]
        },
        " data structure: when it is modified, the page on the screen is updated to reflect the changes."
      ]
    },
    {
      "element": "section",
      "content": [
        {
          "element": "p",
          "content": [
            "You can imagine an HTML document as a nested set of boxes. Tags such as ",
            {
              "element": "literal",
              "content": [
                "<body>"
              ]
            },
            " and ",
            {
              "element": "literal",
              "content": [
                "</body>"
              ]
            },
            " enclose other tags, which in turn contain other tags or text. Here’s the example document from the ",
            {
              "element": "reference",
              "content": [
                "previous chapter"
              ]
            },
            ":"
          ]
        },
        {
          "element": "listing",
          "numbered": false,
          "content": "<!doctype html>\n<html>\n  <head>\n    <title>My home page</title>\n  </head>\n  <body>\n    <h1>My home page</h1>\n    <p>Hello, I am Marijn and this is my home page.</p>\n    <p>I also wrote a book! Read it\n      <a href=\"http://eloquentjavascript.net\">here</a>.</p>\n  </body>\n</html>"
        },
        {
          "element": "p",
          "content": [
            "This page has the following structure:"
          ]
        },
        {
          "element": "img",
          "src": "img/html-boxes.svg"
        },
        {
          "element": "p",
          "content": [
            "The data structure the browser uses to represent the document follows this shape. For each box, there is an object, which we can interact with to find out things such as what HTML tag it represents and which boxes and text it contains. This representation is called the ",
            {
              "element": "em",
              "content": [
                "Document Object Model"
              ]
            },
            ", or DOM for short."
          ]
        },
        {
          "element": "p",
          "content": [
            "The global variable ",
            {
              "element": "literal",
              "content": [
                "document"
              ]
            },
            " gives us access to these objects. Its ",
            {
              "element": "literal",
              "content": [
                "documentElement"
              ]
            },
            " property refers to the object representing the ",
            {
              "element": "literal",
              "content": [
                "<html>"
              ]
            },
            " tag. It also provides the properties ",
            {
              "element": "literal",
              "content": [
                "head"
              ]
            },
            " and ",
            {
              "element": "literal",
              "content": [
                "body"
              ]
            },
            ", which hold the objects for those elements."
          ]
        }
      ],
      "title": "Document structure"
    },
    {
      "element": "section",
      "content": [
        {
          "element": "p",
          "content": [
            "Think back to the syntax trees from ",
            {
              "element": "reference",
              "content": [
                "Chapter 11"
              ]
            },
            " for a moment. Their structures are strikingly similar to the structure of a browser’s document. Each ",
            {
              "element": "em",
              "content": [
                "node"
              ]
            },
            " may refer to other nodes, ",
            {
              "element": "em",
              "content": [
                "children"
              ]
            },
            ", which in turn may have their own children. This shape is typical of nested structures where elements can contain sub-elements that are similar to themselves."
          ]
        },
        {
          "element": "p",
          "content": [
            "We call a data structure a ",
            {
              "element": "em",
              "content": [
                "tree"
              ]
            },
            " when it has a branching structure, has no cycles (a node may not contain itself, directly or indirectly), and has a single, well-defined “root”. In the case of the DOM, ",
            {
              "element": "literal",
              "content": [
                "document.documentElement"
              ]
            },
            " serves as the root."
          ]
        },
        {
          "element": "p",
          "content": [
            "Trees come up a lot in computer science. In addition to representing recursive structures such as HTML documents or programs, they are often used to maintain sorted sets of data because elements can usually be found or inserted more efficiently in a sorted tree than in a sorted flat array."
          ]
        },
        {
          "element": "p",
          "content": [
            "A typical tree has different kinds of nodes. The syntax tree for ",
            {
              "element": "reference",
              "content": [
                "the Egglanguage"
              ]
            },
            " had variables, values, and application nodes. Application nodes always have children, whereas variables and values are ",
            {
              "element": "em",
              "content": [
                "leaves"
              ]
            },
            ", or nodes without children."
          ]
        },
        {
          "element": "p",
          "content": [
            "The same goes for the DOM. Nodes for regular ",
            {
              "element": "em",
              "content": [
                "elements"
              ]
            },
            ", which represent HTML tags, determine the structure of the document. These can have child nodes. An example of such a node is ",
            {
              "element": "literal",
              "content": [
                "document.body"
              ]
            },
            ". Some of these children can be leaf nodes, such as pieces of text or comments (comments are written between ",
            {
              "element": "literal",
              "content": [
                "<!--"
              ]
            },
            " and ",
            {
              "element": "literal",
              "content": [
                "-->"
              ]
            },
            " in HTML)."
          ]
        },
        {
          "element": "p",
          "content": [
            "Each DOM node object has a ",
            {
              "element": "literal",
              "content": [
                "nodeType"
              ]
            },
            " property, which contains a numeric code that identifies the type of node. Regular elements have the value 1, which is also defined as the constant property ",
            {
              "element": "literal",
              "content": [
                "document.ELEMENT_NODE"
              ]
            },
            ". Text nodes, representing a section of text in the document, have the value 3 (",
            {
              "element": "literal",
              "content": [
                "document.TEXT_NODE"
              ]
            },
            "). Comments have the value 8 (",
            {
              "element": "literal",
              "content": [
                "document.COMMENT_NODE"
              ]
            },
            ")."
          ]
        },
        {
          "element": "p",
          "content": [
            "So another way to visualize our document tree is as follows:"
          ]
        },
        {
          "element": "img",
          "src": "img/html-tree.svg"
        },
        {
          "element": "p",
          "content": [
            "The leaves are text nodes, and the arrows indicate parent-child relationships between nodes."
          ]
        }
      ],
      "title": "Trees"
    },
    {
      "element": "section",
      "content": [
        {
          "element": "p",
          "content": [
            "Using cryptic numeric codes to represent node types is not a very JavaScript-like thing to do. Later in this chapter, we’ll see that other parts of the DOM interface also feel cumbersome and alien. The reason for this is that the DOM wasn’t designed for just JavaScript. Rather, it tries to define a language-neutral interface that can be used in other systems as well—not just HTML but also XML, which is a generic data format with an HTML-like syntax."
          ]
        },
        {
          "element": "p",
          "content": [
            "This is unfortunate. Standards are often useful. But in this case, the advantage (cross-language consistency) isn’t all that compelling. Having an interface that is properly integrated with the language you are using will save you more time than having a familiar interface across languages."
          ]
        },
        {
          "element": "p",
          "content": [
            "As an example of such poor integration, consider the ",
            {
              "element": "literal",
              "content": [
                "childNodes"
              ]
            },
            " property that element nodes in the DOM have. This property holds an array-like object, with a ",
            {
              "element": "literal",
              "content": [
                "length"
              ]
            },
            " property and properties labeled by numbers to access the child nodes. But it is an instance of the ",
            {
              "element": "literal",
              "content": [
                "NodeList"
              ]
            },
            " type, not a real array, so it does not have methods such as ",
            {
              "element": "literal",
              "content": [
                "slice"
              ]
            },
            " and ",
            {
              "element": "literal",
              "content": [
                "forEach"
              ]
            },
            "."
          ]
        },
        {
          "element": "p",
          "content": [
            " Then there are issues that are simply poor design. For example, there is no way to create a new node and immediately add children or attributes to it. Instead, you have to first create it, then add the children one by one, and finally set the attributes one by one, using side effects. Code that interacts heavily with the DOM tends to get long, repetitive, and ugly."
          ]
        },
        {
          "element": "p",
          "content": [
            "But these flaws aren’t fatal. Since JavaScript allows us to create our own abstractions, it is easy to write some helper functions that allow you to express the operations you are performing in a clearer and shorter way. In fact, many libraries intended for browser programming come with such tools."
          ]
        }
      ],
      "title": "The standard"
    },
    {
      "element": "section",
      "content": [
        {
          "element": "p",
          "content": [
            "DOM nodes contain a wealth of links to other nearby nodes. The following diagram illustrates these:"
          ]
        },
        {
          "element": "img",
          "src": "img/html-links.svg"
        },
        {
          "element": "p",
          "content": [
            "Although the diagram shows only one link of each type, every node has a ",
            {
              "element": "literal",
              "content": [
                "parentNode"
              ]
            },
            " property that points to its containing node. Likewise, every element node (node type 1) has a ",
            {
              "element": "literal",
              "content": [
                "childNodes"
              ]
            },
            " property that points to an array-like object holding its children."
          ]
        },
        {
          "element": "p",
          "content": [
            "In theory, you could move anywhere in the tree using just these parent and child links. But JavaScript also gives you access to a number of additional convenience links. The ",
            {
              "element": "literal",
              "content": [
                "firstChild"
              ]
            },
            " and ",
            {
              "element": "literal",
              "content": [
                "lastChild"
              ]
            },
            " properties point to the first and last child elements or have the value ",
            {
              "element": "literal",
              "content": [
                "null"
              ]
            },
            " for nodes without children. Similarly, ",
            {
              "element": "literal",
              "content": [
                "previousSibling"
              ]
            },
            " and ",
            {
              "element": "literal",
              "content": [
                "nextSibling"
              ]
            },
            " point to adjacent nodes, which are nodes with the same parent that appear immediately before or after the node itself. For a first child, ",
            {
              "element": "literal",
              "content": [
                "previousSibling"
              ]
            },
            " will be null, and for a last child, ",
            {
              "element": "literal",
              "content": [
                "nextSibling"
              ]
            },
            " will be null."
          ]
        },
        {
          "element": "p",
          "content": [
            "When dealing with a nested data structure like this one, recursive functions are often useful. The following recursive function scans a document for text nodes containing a given string and returns ",
            {
              "element": "literal",
              "content": [
                "true"
              ]
            },
            " when it has found one:"
          ]
        },
        {
          "element": "listing",
          "numbered": false,
          "content": "function talksAbout(node, string) {\n  if (node.nodeType == document.ELEMENT_NODE) {\n    for (var i = 0; i < node.childNodes.length; i++) {\n      if (talksAbout(node.childNodes[i], string))\n        return true;\n    }\n    return false;\n  } else if (node.nodeType == document.TEXT_NODE) {\n    return node.nodeValue.indexOf(string) > -1;\n  }\n}\n\nconsole.log(talksAbout(document.body, \"book\"));\n// → true"
        },
        {
          "element": "p",
          "content": [
            "The ",
            {
              "element": "literal",
              "content": [
                "nodeValue"
              ]
            },
            " property of a text node refers to the string of text that it represents."
          ]
        }
      ],
      "title": "Moving through the tree"
    },
    {
      "element": "section",
      "content": [
        {
          "element": "p",
          "content": [
            "Navigating these links among parents, children, and siblings is often useful, as in the previous function, which runs through the whole document. But if we want to find a specific node in the document, reaching it by starting at ",
            {
              "element": "literal",
              "content": [
                "document.body"
              ]
            },
            " and blindly following a hard-coded path of links is a bad idea. Doing so bakes assumptions into our program about the precise structure of the document—a structure we might want to change later. Another complicating factor is that text nodes are created even for the whitespace between nodes. The example document’s body tag does not have just three children (",
            {
              "element": "literal",
              "content": [
                "<h1>"
              ]
            },
            " and two ",
            {
              "element": "literal",
              "content": [
                "<p>"
              ]
            },
            " elements) but actually has seven: those three, plus the spaces before, after, and between them."
          ]
        },
        {
          "element": "p",
          "content": [
            "So if we want to get the ",
            {
              "element": "literal",
              "content": [
                "href"
              ]
            },
            " attribute of the link in that document, we don’t want to say something like “Get the second child of the sixth child of the document body”. It’d be better if we could say “Get the first link in the document”. And we can."
          ]
        },
        {
          "element": "listing",
          "numbered": false,
          "content": "var link = document.body.getElementsByTagName(\"a\")[0];\nconsole.log(link.href);"
        },
        {
          "element": "p",
          "content": [
            "All element nodes have a ",
            {
              "element": "literal",
              "content": [
                "getElementsByTagName"
              ]
            },
            " method, which collects all elements with the given tag name that are descendants (direct or indirect children) of the given node and returns them as an array-like object."
          ]
        },
        {
          "element": "p",
          "content": [
            "To find a specific ",
            {
              "element": "em",
              "content": [
                "single"
              ]
            },
            " node, you can give it an ",
            {
              "element": "literal",
              "content": [
                "id"
              ]
            },
            " attribute and use ",
            {
              "element": "literal",
              "content": [
                "document.getElementById"
              ]
            },
            " instead."
          ]
        },
        {
          "element": "listing",
          "numbered": false,
          "content": "<p>My ostrich Gertrude:</p>\n<p><img id=\"gertrude\" src=\"img/ostrich.png\"></p>\n\n<script>\n  var ostrich = document.getElementById(\"gertrude\");\n  console.log(ostrich.src);\n</script>"
        },
        {
          "element": "p",
          "content": [
            "A third, similar method is ",
            {
              "element": "literal",
              "content": [
                "getElementsByClassName"
              ]
            },
            ", which, like ",
            {
              "element": "literal",
              "content": [
                "getElementsByTagName"
              ]
            },
            ", searches through the contents of an element node and retrieves all elements that have the given string in their ",
            {
              "element": "literal",
              "content": [
                "class"
              ]
            },
            " attribute."
          ]
        }
      ],
      "title": "Finding elements"
    },
    {
      "element": "section",
      "content": [
        {
          "element": "p",
          "content": [
            "Almost everything about the DOM data structure can be changed. Element nodes have a number of methods that can be used to change their content. The ",
            {
              "element": "literal",
              "content": [
                "removeChild"
              ]
            },
            " method removes the given child node from the document. To add a child, we can use ",
            {
              "element": "literal",
              "content": [
                "appendChild"
              ]
            },
            ", which puts it at the end of the list of children, or ",
            {
              "element": "literal",
              "content": [
                "insertBefore"
              ]
            },
            ", which inserts the node given as the first argument before the node given as the second argument."
          ]
        },
        {
          "element": "listing",
          "numbered": false,
          "content": "<p>One</p>\n<p>Two</p>\n<p>Three</p>\n\n<script>\n  var paragraphs = document.body.getElementsByTagName(\"p\");\n  document.body.insertBefore(paragraphs[2], paragraphs[0]);\n</script>"
        },
        {
          "element": "p",
          "content": [
            "A node can exist in the document in only one place. Thus, inserting paragraph “Three” in front of paragraph “One” will first remove it from the end of the document and then insert it at the front, resulting in “Three/One/Two”. All operations that insert a node somewhere will, as a side effect, cause it to be removed from its current position (if it has one)."
          ]
        },
        {
          "element": "p",
          "content": [
            "The ",
            {
              "element": "literal",
              "content": [
                "replaceChild"
              ]
            },
            " method is used to replace a child node with another one. It takes as arguments two nodes: a new node and the node to be replaced. The replaced node must be a child of the element the method is called on. Note that both ",
            {
              "element": "literal",
              "content": [
                "replaceChild"
              ]
            },
            " and ",
            {
              "element": "literal",
              "content": [
                "insertBefore"
              ]
            },
            " expect the ",
            {
              "element": "em",
              "content": [
                "new"
              ]
            },
            " node as their first argument."
          ]
        }
      ],
      "title": "Changing the document"
    },
    {
      "element": "section",
      "content": [
        {
          "element": "p",
          "content": [
            "In the following example, we want to write a script that replaces all images (",
            {
              "element": "literal",
              "content": [
                "<img>"
              ]
            },
            " tags) in the document with the text held in their ",
            {
              "element": "literal",
              "content": [
                "alt"
              ]
            },
            " attributes, which specifies an alternative textual representation of the image."
          ]
        },
        {
          "element": "p",
          "content": [
            "This involves not only removing the images but adding a new text node to replace them. For this, we use the ",
            {
              "element": "literal",
              "content": [
                "document.createTextNode"
              ]
            },
            " method."
          ]
        },
        {
          "element": "listing",
          "numbered": false,
          "content": "<p>The <img src=\"img/cat.png\" alt=\"Cat\"> in the\n  <img src=\"img/hat.png\" alt=\"Hat\">.</p>\n\n<p><button onclick=\"replaceImages()\">Replace</button></p>\n\n<script>\n  function replaceImages() {\n    var images = document.body.getElementsByTagName(\"img\");\n    for (var i = images.length - 1; i >= 0; i--) {\n      var image = images[i];\n      if (image.alt) {\n        var text = document.createTextNode(image.alt);\n        image.parentNode.replaceChild(text, image);\n      }\n    }\n  }\n</script>"
        },
        {
          "element": "p",
          "content": [
            "Given a string, ",
            {
              "element": "literal",
              "content": [
                "createTextNode"
              ]
            },
            " gives us a type 3 DOM node (a text node), which we can insert into the document to make it show up on the screen."
          ]
        },
        {
          "element": "p",
          "content": [
            "The loop that goes over the images starts at the end of the list of nodes. This is necessary because the node list returned by a method like ",
            {
              "element": "literal",
              "content": [
                "getElementsByTagName"
              ]
            },
            " (or a property like ",
            {
              "element": "literal",
              "content": [
                "childNodes"
              ]
            },
            ") is ",
            {
              "element": "em",
              "content": [
                "live"
              ]
            },
            ". That is, it is updated as the document changes. If we started from the front, removing the first image would cause the list to lose its first element so that the second time the loop repeats, where ",
            {
              "element": "literal",
              "content": [
                "i"
              ]
            },
            " is 1, it would stop because the length of the collection is now also 1."
          ]
        },
        {
          "element": "p",
          "content": [
            "If you want a ",
            {
              "element": "em",
              "content": [
                "solid"
              ]
            },
            " collection of nodes, as opposed to a live one, you can convert the collection to a real array by calling the array ",
            {
              "element": "literal",
              "content": [
                "slice"
              ]
            },
            " method on it."
          ]
        },
        {
          "element": "listing",
          "numbered": false,
          "content": "var arrayish = {0: \"one\", 1: \"two\", length: 2};\nvar real = Array.prototype.slice.call(arrayish, 0);\nreal.forEach(function(elt) { console.log(elt); });\n// → one\n//   two"
        },
        {
          "element": "p",
          "content": [
            "To create regular element nodes (type 1), you can use the ",
            {
              "element": "literal",
              "content": [
                "document.createElement"
              ]
            },
            " method. This method takes a tag name and returns a new empty node of the given type."
          ]
        },
        {
          "element": "p",
          "content": [
            "The following example defines a utility ",
            {
              "element": "literal",
              "content": [
                "elt"
              ]
            },
            ", which creates an element node and treats the rest of its arguments as children to that node. This function is then used to add a simple attribution to a quote."
          ]
        },
        {
          "element": "listing",
          "numbered": false,
          "content": "<blockquote id=\"quote\">\n  No book can ever be finished. While working on it we learn\n  just enough to find it immature the moment we turn away\n  from it.\n</blockquote>\n\n<script>\n  function elt(type) {\n    var node = document.createElement(type);\n    for (var i = 1; i < arguments.length; i++) {\n      var child = arguments[i];\n      if (typeof child == \"string\")\n        child = document.createTextNode(child);\n      node.appendChild(child);\n    }\n    return node;\n  }\n\n  document.getElementById(\"quote\").appendChild(\n    elt(\"footer\", \"—\",\n        elt(\"strong\", \"Karl Popper\"),\n        \", preface to the second editon of \",\n        elt(\"em\", \"The Open Society and Its Enemies\"),\n        \", 1950\"));\n</script>"
        }
      ],
      "title": "Creating nodes"
    },
    {
      "element": "section",
      "content": [
        {
          "element": "p",
          "content": [
            "Some element attributes, such as ",
            {
              "element": "literal",
              "content": [
                "href"
              ]
            },
            " for links, can be accessed through a property of the same name on the element’s DOM object. This is the case for a limited set of commonly used standard attributes."
          ]
        },
        {
          "element": "p",
          "content": [
            "But HTML allows you to set any attribute you want on nodes. This can be useful because it allows you to store extra information in a document. If you make up your own attribute names, though, such attributes will not be present as a property on the element’s node. Instead, you’ll have to use the ",
            {
              "element": "literal",
              "content": [
                "getAttribute"
              ]
            },
            " and ",
            {
              "element": "literal",
              "content": [
                "setAttribute"
              ]
            },
            " methods to work with them."
          ]
        },
        {
          "element": "listing",
          "numbered": false,
          "content": "<p data-classified=\"secret\">The launch code is 00000000.</p>\n<p data-classified=\"unclassified\">I have two feet.</p>\n\n<script>\n  var paras = document.body.getElementsByTagName(\"p\");\n  Array.prototype.forEach.call(paras, function(para) {\n    if (para.getAttribute(\"data-classified\") == \"secret\")\n      para.parentNode.removeChild(para);\n  });\n</script>"
        },
        {
          "element": "p",
          "content": [
            "I recommended prefixing the names of such made-up attributes with ",
            {
              "element": "literal",
              "content": [
                "data-"
              ]
            },
            " to ensure they do not conflict with any other attributes."
          ]
        },
        {
          "element": "p",
          "content": [
            "As a simple example, we’ll write a “syntax highlighter” that looks for ",
            {
              "element": "literal",
              "content": [
                "<pre>"
              ]
            },
            " tags (“preformatted”, used for code and similar plaintext) with a ",
            {
              "element": "literal",
              "content": [
                "data-language"
              ]
            },
            " attribute and crudely tries to highlight the keywords for that language."
          ]
        },
        {
          "element": "listing",
          "numbered": false,
          "content": "function highlightCode(node, keywords) {\n  var text = node.textContent;\n  node.textContent = \"\"; // Clear the node\n\n  var match, pos = 0;\n  while (match = keywords.exec(text)) {\n    var before = text.slice(pos, match.index);\n    node.appendChild(document.createTextNode(before));\n    var strong = document.createElement(\"strong\");\n    strong.appendChild(document.createTextNode(match[0]));\n    node.appendChild(strong);\n    pos = keywords.lastIndex;\n  }\n  var after = text.slice(pos);\n  node.appendChild(document.createTextNode(after));\n}"
        },
        {
          "element": "p",
          "content": [
            "The function ",
            {
              "element": "literal",
              "content": [
                "highlightCode"
              ]
            },
            " takes a ",
            {
              "element": "literal",
              "content": [
                "<pre>"
              ]
            },
            " node and a regular expression (with the “global” option turned on) that matches the keywords of the programming language that the element contains."
          ]
        },
        {
          "element": "p",
          "content": [
            "The ",
            {
              "element": "literal",
              "content": [
                "textContent"
              ]
            },
            " property is used to get all the text in the node and is then set to an empty string, which has the effect of emptying the node. We loop over all matches of the keyword expression, appending the text ",
            {
              "element": "em",
              "content": [
                "between"
              ]
            },
            " them as regular text nodes, and the text matched (the keywords) as text nodes wrapped in ",
            {
              "element": "literal",
              "content": [
                "<strong>"
              ]
            },
            " (bold) elements."
          ]
        },
        {
          "element": "p",
          "content": [
            "We can automatically highlight all programs on the page by looping over all the ",
            {
              "element": "literal",
              "content": [
                "<pre>"
              ]
            },
            " elements that have a ",
            {
              "element": "literal",
              "content": [
                "data-language"
              ]
            },
            " attribute and calling ",
            {
              "element": "literal",
              "content": [
                "highlightCode"
              ]
            },
            " on each one with the correct regular expression for the language."
          ]
        },
        {
          "element": "listing",
          "numbered": false,
          "content": "var languages = {\n  javascript: /\\b(function|return|var)\\b/g /* … etc */\n};\n\nfunction highlightAllCode() {\n  var pres = document.body.getElementsByTagName(\"pre\");\n  for (var i = 0; i < pres.length; i++) {\n    var pre = pres[i];\n    var lang = pre.getAttribute(\"data-language\");\n    if (languages.hasOwnProperty(lang))\n      highlightCode(pre, languages[lang]);\n  }\n}"
        },
        {
          "element": "p",
          "content": [
            "Here is an example:"
          ]
        },
        {
          "element": "listing",
          "numbered": false,
          "content": "<p>Here it is, the identity function:</p>\n<pre data-language=\"javascript\">\nfunction id(x) { return x; }\n</pre>\n\n<script>highlightAllCode();</script>"
        },
        {
          "element": "p",
          "content": [
            "There is one commonly used attribute, ",
            {
              "element": "literal",
              "content": [
                "class"
              ]
            },
            ", which is a reserved word in the JavaScript language. For historical reasons—some old JavaScript implementations could not handle property names that matched keywords or reserved words—the property used to access this attribute is called ",
            {
              "element": "literal",
              "content": [
                "className"
              ]
            },
            ". You can also access it under its real name, ",
            {
              "element": "literal",
              "content": [
                "\"class\""
              ]
            },
            ", by using the ",
            {
              "element": "literal",
              "content": [
                "getAttribute"
              ]
            },
            " and ",
            {
              "element": "literal",
              "content": [
                "setAttribute"
              ]
            },
            " methods."
          ]
        }
      ],
      "title": "Attributes"
    },
    {
      "element": "section",
      "content": [
        {
          "element": "p",
          "content": [
            "You might have noticed that different types of elements are laid out differently. Some, such as paragraphs (",
            {
              "element": "literal",
              "content": [
                "<p>"
              ]
            },
            ") or headings (",
            {
              "element": "literal",
              "content": [
                "<h1>"
              ]
            },
            "), take up the whole width of the document and are rendered on separate lines. These are called ",
            {
              "element": "em",
              "content": [
                "block"
              ]
            },
            " elements. Others, such as links (",
            {
              "element": "literal",
              "content": [
                "<a>"
              ]
            },
            ") or the ",
            {
              "element": "literal",
              "content": [
                "<strong>"
              ]
            },
            " element used in the previous example, are rendered on the same line with their surrounding text. Such elements are called ",
            {
              "element": "em",
              "content": [
                "inline"
              ]
            },
            " elements."
          ]
        },
        {
          "element": "p",
          "content": [
            "For any given document, browsers are able to compute a layout, which gives each element a size and position based on its type and content. This layout is then used to actually draw the document."
          ]
        },
        {
          "element": "p",
          "content": [
            "The size and position of an element can be accessed from JavaScript. The ",
            {
              "element": "literal",
              "content": [
                "offsetWidth"
              ]
            },
            " and ",
            {
              "element": "literal",
              "content": [
                "offsetHeight"
              ]
            },
            " properties give you the space the element takes up in ",
            {
              "element": "em",
              "content": [
                "pixels"
              ]
            },
            ". A pixel is the basic unit of measurement in the browser and typically corresponds to the smallest dot that your screen can display. Similarly, ",
            {
              "element": "literal",
              "content": [
                "clientWidth"
              ]
            },
            " and ",
            {
              "element": "literal",
              "content": [
                "clientHeight"
              ]
            },
            " give you the size of the space ",
            {
              "element": "em",
              "content": [
                "inside"
              ]
            },
            " the element, ignoring border width."
          ]
        },
        {
          "element": "listing",
          "numbered": false,
          "content": "<p style=\"border: 3px solid red\">\n  I'm boxed in\n</p>\n\n<script>\n  var para = document.body.getElementsByTagName(\"p\")[0];\n  console.log(\"clientHeight:\", para.clientHeight);\n  console.log(\"offsetHeight:\", para.offsetHeight);\n</script>"
        },
        {
          "element": "p",
          "content": [
            "The most effective way to find the precise position of an element on the screen is the ",
            {
              "element": "literal",
              "content": [
                "getBoundingClientRect"
              ]
            },
            " method. It returns an object with ",
            {
              "element": "literal",
              "content": [
                "top"
              ]
            },
            ", ",
            {
              "element": "literal",
              "content": [
                "bottom"
              ]
            },
            ", ",
            {
              "element": "literal",
              "content": [
                "left"
              ]
            },
            ", and ",
            {
              "element": "literal",
              "content": [
                "right"
              ]
            },
            " properties, indicating the pixel positions of the sides of the element relative to the top left of the screen. If you want them relative to the whole document, you must add the current scroll position, found under the global ",
            {
              "element": "literal",
              "content": [
                "pageXOffset"
              ]
            },
            " and ",
            {
              "element": "literal",
              "content": [
                "pageYOffset"
              ]
            },
            " variables."
          ]
        },
        {
          "element": "p",
          "content": [
            "Laying out a document can be quite a lot of work. In the interest of speed, browser engines do not immediately re-layout a document every time it is changed but rather wait as long as they can. When a JavaScript program that changed the document finishes running, the browser will have to compute a new layout in order to display the changed document on the screen. When a program ",
            {
              "element": "em",
              "content": [
                "asks"
              ]
            },
            " for the position or size of something by reading properties such as ",
            {
              "element": "literal",
              "content": [
                "offsetHeight"
              ]
            },
            " or calling ",
            {
              "element": "literal",
              "content": [
                "getBoundingClientRect"
              ]
            },
            ", providing correct information also requires computing a layout."
          ]
        },
        {
          "element": "p",
          "content": [
            "A program that repeatedly alternates between reading DOM layout information and changing the DOM forces a lot of layouts to happen and will consequently run really slowly. The following code shows an example of this. It contains two different programs that build up a line of ",
            {
              "element": "em",
              "content": [
                "X"
              ]
            },
            " characters 2,000 pixels wide and measures the time each one takes."
          ]
        },
        {
          "element": "listing",
          "numbered": false,
          "content": "<p><span id=\"one\"></span></p>\n<p><span id=\"two\"></span></p>\n\n<script>\n  function time(name, action) {\n    var start = Date.now(); // Current time in milliseconds\n    action();\n    console.log(name, \"took\", Date.now() - start, \"ms\");\n  }\n\n  time(\"naive\", function() {\n    var target = document.getElementById(\"one\");\n    while (target.offsetWidth < 2000)\n      target.appendChild(document.createTextNode(\"X\"));\n  });\n  // → naive took 32 ms\n\n  time(\"clever\", function() {\n    var target = document.getElementById(\"two\");\n    target.appendChild(document.createTextNode(\"XXXXX\"));\n    var total = Math.ceil(2000 / (target.offsetWidth / 5));\n    for (var i = 5; i < total; i++)\n      target.appendChild(document.createTextNode(\"X\"));\n  });\n  // → clever took 1 ms\n</script>"
        }
      ],
      "title": "Layout"
    },
    {
      "element": "section",
      "content": [
        {
          "element": "p",
          "content": [
            "We have seen that different HTML elements display different behavior. Some are displayed as blocks, others inline. Some add styling, such as ",
            {
              "element": "literal",
              "content": [
                "<strong>"
              ]
            },
            " making its content bold and ",
            {
              "element": "literal",
              "content": [
                "<a>"
              ]
            },
            " making it blue and underlining it."
          ]
        },
        {
          "element": "p",
          "content": [
            "The way an ",
            {
              "element": "literal",
              "content": [
                "<img>"
              ]
            },
            " tag shows an image or an ",
            {
              "element": "literal",
              "content": [
                "<a>"
              ]
            },
            " tag causes a link to be followed when it is clicked is strongly tied to the element type. But the default styling associated with an element, such as the text color or underline, can be changed by us. Here is an example using the ",
            {
              "element": "literal",
              "content": [
                "style"
              ]
            },
            " property:"
          ]
        },
        {
          "element": "listing",
          "numbered": false,
          "content": "<p><a href=\".\">Normal link</a></p>\n<p><a href=\".\" style=\"color: green\">Green link</a></p>"
        },
        {
          "element": "p",
          "content": [
            "A style attribute may contain one or more ",
            {
              "element": "em",
              "content": [
                "declarations"
              ]
            },
            ", which are a property (such as ",
            {
              "element": "literal",
              "content": [
                "color"
              ]
            },
            ") followed by a colon and a value (such as ",
            {
              "element": "literal",
              "content": [
                "green"
              ]
            },
            "). When there is more than one declaration, they must be separated by semicolons, as in ",
            {
              "element": "literal",
              "content": [
                "\"color: red; border: none\""
              ]
            },
            "."
          ]
        },
        {
          "element": "p",
          "content": [
            "There are a lot of aspects that can be influenced by styling. For example, the ",
            {
              "element": "literal",
              "content": [
                "display"
              ]
            },
            " property controls whether an element is displayed as a block or an inline element."
          ]
        },
        {
          "element": "listing",
          "numbered": false,
          "content": "This text is displayed <strong>inline</strong>,\n<strong style=\"display: block\">as a block</strong>, and\n<strong style=\"display: none\">not at all</strong>."
        },
        {
          "element": "p",
          "content": [
            "The ",
            {
              "element": "literal",
              "content": [
                "block"
              ]
            },
            " tag will end up on its own line since block elements are not displayed inline with the text around them. The last tag is not displayed at all—",
            {
              "element": "literal",
              "content": [
                "display: none"
              ]
            },
            " prevents an element from showing up on the screen. This is a way to hide elements. It is often preferable to removing them from the document entirely because it makes it easy to reveal them again at a later time."
          ]
        },
        {
          "element": "p",
          "content": [
            "JavaScript code can directly manipulate the style of an element through the node’s ",
            {
              "element": "literal",
              "content": [
                "style"
              ]
            },
            " property. This property holds an object that has properties for all possible style properties. The values of these properties are strings, which we can write to in order to change a particular aspect of the element’s style."
          ]
        },
        {
          "element": "listing",
          "numbered": false,
          "content": "<p id=\"para\" style=\"color: purple\">\n  Pretty text\n</p>\n\n<script>\n  var para = document.getElementById(\"para\");\n  console.log(para.style.color);\n  para.style.color = \"magenta\";\n</script>"
        },
        {
          "element": "p",
          "content": [
            "Some style property names contain dashes, such as ",
            {
              "element": "literal",
              "content": [
                "font-family"
              ]
            },
            ". Because such property names are awkward to work with in JavaScript (you’d have to say ",
            {
              "element": "literal",
              "content": [
                "style[\"font-family\"]"
              ]
            },
            "), the property names in the ",
            {
              "element": "literal",
              "content": [
                "style"
              ]
            },
            " object for such properties have their dashes removed and the letters that follow them capitalized (",
            {
              "element": "literal",
              "content": [
                "style.fontFamily"
              ]
            },
            ")."
          ]
        }
      ],
      "title": "Styling"
    },
    {
      "element": "section",
      "content": [
        {
          "element": "p",
          "content": [
            "The styling system for HTML is called CSS for ",
            {
              "element": "em",
              "content": [
                "Cascading Style Sheets"
              ]
            },
            ". A ",
            {
              "element": "em",
              "content": [
                "style sheet"
              ]
            },
            " is a set of rules for how to style elements in a document. It can be given inside a ",
            {
              "element": "literal",
              "content": [
                "<style>"
              ]
            },
            " tag."
          ]
        },
        {
          "element": "listing",
          "numbered": false,
          "content": "<style>\n  strong {\n    font-style: italic;\n    color: gray;\n  }\n</style>\n<p>Now <strong>strong text</strong> is italic and gray.</p>"
        },
        {
          "element": "p",
          "content": [
            "The ",
            {
              "element": "em",
              "content": [
                "cascading"
              ]
            },
            " in the name refers to the fact that multiple such rules are combined to produce the final style for an element. In the previous example, the default styling for ",
            {
              "element": "literal",
              "content": [
                "<strong>"
              ]
            },
            " tags, which gives them ",
            {
              "element": "literal",
              "content": [
                "font-weight:bold"
              ]
            },
            ", is overlaid by the rule in the ",
            {
              "element": "literal",
              "content": [
                "<style>"
              ]
            },
            " tag, which adds ",
            {
              "element": "literal",
              "content": [
                "font-style"
              ]
            },
            " and ",
            {
              "element": "literal",
              "content": [
                "color"
              ]
            },
            "."
          ]
        },
        {
          "element": "p",
          "content": [
            "When multiple rules define a value for the same property, the most recently read rule gets a higher precedence and wins. So if the rule in the ",
            {
              "element": "literal",
              "content": [
                "<style>"
              ]
            },
            " tag included ",
            {
              "element": "literal",
              "content": [
                "font-weight: normal"
              ]
            },
            ", conflicting with the default ",
            {
              "element": "literal",
              "content": [
                "font-weight"
              ]
            },
            " rule, the text would be normal, ",
            {
              "element": "em",
              "content": [
                "not"
              ]
            },
            " bold. Styles in a ",
            {
              "element": "literal",
              "content": [
                "style"
              ]
            },
            " attribute applied directly to the node have the highest precedence and always win."
          ]
        },
        {
          "element": "p",
          "content": [
            "It is possible to target things other than tag names in CSS rules. A rule for ",
            {
              "element": "literal",
              "content": [
                ".abc"
              ]
            },
            " applies to all elements with ",
            {
              "element": "literal",
              "content": [
                "\"abc\""
              ]
            },
            " in their class attributes. A rule for ",
            {
              "element": "literal",
              "content": [
                "#xyz"
              ]
            },
            " applies to the element with an ",
            {
              "element": "literal",
              "content": [
                "id"
              ]
            },
            " attribute of ",
            {
              "element": "literal",
              "content": [
                "\"xyz\""
              ]
            },
            " (which should be unique within the document)."
          ]
        },
        {
          "element": "listing",
          "numbered": false,
          "content": ".subtle {\n  color: gray;\n  font-size: 80%;\n}\n#header {\n  background: blue;\n  color: white;\n}\n/* p elements, with classes a and b, and id main */\np.a.b#main {\n  margin-bottom: 20px;\n}"
        },
        {
          "element": "p",
          "content": [
            "The precedence rule favoring the most recently defined rule holds true only when the rules have the same ",
            {
              "element": "em",
              "content": [
                "specificity"
              ]
            },
            ". A rule’s specificity is a measure of how precisely it describes matching elements, determined by the number and kind (tag, class, or ID) of element aspects it requires. For example, a rule that targets ",
            {
              "element": "literal",
              "content": [
                "p.a"
              ]
            },
            " is more specific than rules that target ",
            {
              "element": "literal",
              "content": [
                "p"
              ]
            },
            " or just ",
            {
              "element": "literal",
              "content": [
                ".a"
              ]
            },
            ", and would thus take precedence over them."
          ]
        },
        {
          "element": "p",
          "content": [
            "The notation ",
            {
              "element": "literal",
              "content": [
                "p > a {…}"
              ]
            },
            " applies the given styles to all ",
            {
              "element": "literal",
              "content": [
                "<a>"
              ]
            },
            " tags that are direct children of ",
            {
              "element": "literal",
              "content": [
                "<p>"
              ]
            },
            " tags. Similarly, ",
            {
              "element": "literal",
              "content": [
                "p a {…}"
              ]
            },
            " applies to all ",
            {
              "element": "literal",
              "content": [
                "<a>"
              ]
            },
            " tags inside ",
            {
              "element": "literal",
              "content": [
                "<p>"
              ]
            },
            " tags, whether they are direct or indirect children."
          ]
        }
      ],
      "title": "Cascading styles"
    },
    {
      "element": "section",
      "content": [
        {
          "element": "p",
          "content": [
            "We won’t be using style sheets all that much in this book. Although understanding them is crucial to programming in the browser, properly explaining all the properties they support and the interaction among those properties would take two or three books."
          ]
        },
        {
          "element": "p",
          "content": [
            "The main reason I introduced ",
            {
              "element": "em",
              "content": [
                "selector"
              ]
            },
            " syntax—the notation used in style sheets to determine which elements a set of styles apply to—is that we can use this same mini-language as an effective way to find DOM elements."
          ]
        },
        {
          "element": "p",
          "content": [
            "The ",
            {
              "element": "literal",
              "content": [
                "querySelectorAll"
              ]
            },
            " method, which is defined both on the ",
            {
              "element": "literal",
              "content": [
                "document"
              ]
            },
            " object and on element nodes, takes a selector string and returns an array-like object containing all the elements that it matches."
          ]
        },
        {
          "element": "listing",
          "numbered": false,
          "content": "<p>And if you go chasing\n  <span class=\"animal\">rabbits</span></p>\n<p>And you know you're going to fall</p>\n<p>Tell 'em a <span class=\"character\">hookah smoking\n  <span class=\"animal\">caterpillar</span></span></p>\n<p>Has given you the call</p>\n\n<script>\n  function count(selector) {\n    return document.querySelectorAll(selector).length;\n  }\n  console.log(count(\"p\"));           // All <p> elements\n  // → 4\n  console.log(count(\".animal\"));     // Class animal\n  // → 2\n  console.log(count(\"p .animal\"));   // Animal inside of <p>\n  // → 2\n  console.log(count(\"p > .animal\")); // Direct child of <p>\n  // → 1\n</script>"
        },
        {
          "element": "p",
          "content": [
            "Unlike methods such as ",
            {
              "element": "literal",
              "content": [
                "getElementsByTagName"
              ]
            },
            ", the object returned by ",
            {
              "element": "literal",
              "content": [
                "querySelectorAll"
              ]
            },
            " is ",
            {
              "element": "em",
              "content": [
                "not"
              ]
            },
            " live. It won’t change when you change the document."
          ]
        },
        {
          "element": "p",
          "content": [
            "The ",
            {
              "element": "literal",
              "content": [
                "querySelector"
              ]
            },
            " method (without the ",
            {
              "element": "literal",
              "content": [
                "All"
              ]
            },
            " part) works in a similar way. This one is useful if you want a specific, single element. It will return only the first matching element or null if no elements match."
          ]
        }
      ],
      "title": "Query selectors"
    },
    {
      "element": "section",
      "content": [
        {
          "element": "p",
          "content": [
            "The ",
            {
              "element": "literal",
              "content": [
                "position"
              ]
            },
            " style property influences layout in a powerful way. By default it has a value of ",
            {
              "element": "literal",
              "content": [
                "static"
              ]
            },
            ", meaning the element sits in its normal place in the document. When it is set to ",
            {
              "element": "literal",
              "content": [
                "relative"
              ]
            },
            ", the element still takes up space in the document, but now the ",
            {
              "element": "literal",
              "content": [
                "top"
              ]
            },
            " and ",
            {
              "element": "literal",
              "content": [
                "left"
              ]
            },
            " style properties can be used to move it relative to its normal place. When ",
            {
              "element": "literal",
              "content": [
                "position"
              ]
            },
            " is set to ",
            {
              "element": "literal",
              "content": [
                "absolute"
              ]
            },
            ", the element is removed from the normal document flow—that is, it no longer takes up space and may overlap with other elements. Also, its ",
            {
              "element": "literal",
              "content": [
                "top"
              ]
            },
            " and ",
            {
              "element": "literal",
              "content": [
                "left"
              ]
            },
            " properties can be used to absolutely position it relative to the top-left corner of the nearest enclosing element whose ",
            {
              "element": "literal",
              "content": [
                "position"
              ]
            },
            " property isn’t ",
            {
              "element": "literal",
              "content": [
                "static"
              ]
            },
            ", or relative to the document if no such enclosing element exists."
          ]
        },
        {
          "element": "p",
          "content": [
            "We can use this to create an animation. The following document displays a picture of a cat that floats around in an ellipse:"
          ]
        },
        {
          "element": "listing",
          "numbered": false,
          "content": "<p style=\"text-align: center\">\n  <img src=\"img/cat.png\" style=\"position: relative\">\n</p>\n<script>\n  var cat = document.querySelector(\"img\");\n  var angle = 0, lastTime = null;\n  function animate(time) {\n    if (lastTime != null)\n      angle += (time - lastTime) * 0.001;\n    lastTime = time;\n    cat.style.top = (Math.sin(angle) * 20) + \"px\";\n    cat.style.left = (Math.cos(angle) * 200) + \"px\";\n    requestAnimationFrame(animate);\n  }\n  requestAnimationFrame(animate);\n</script>"
        },
        {
          "element": "p",
          "content": [
            "The picture is centered on the page and given a ",
            {
              "element": "literal",
              "content": [
                "position"
              ]
            },
            " of ",
            {
              "element": "literal",
              "content": [
                "relative"
              ]
            },
            ". We’ll repeatedly update that picture’s ",
            {
              "element": "literal",
              "content": [
                "top"
              ]
            },
            " and ",
            {
              "element": "literal",
              "content": [
                "left"
              ]
            },
            " styles in order to move it."
          ]
        },
        {
          "element": "p",
          "content": [
            "The script uses ",
            {
              "element": "literal",
              "content": [
                "requestAnimationFrame"
              ]
            },
            " to schedule the ",
            {
              "element": "literal",
              "content": [
                "animate"
              ]
            },
            " function to run whenever the browser is ready to repaint the screen. The ",
            {
              "element": "literal",
              "content": [
                "animate"
              ]
            },
            " function itself again calls ",
            {
              "element": "literal",
              "content": [
                "requestAnimationFrame"
              ]
            },
            " to schedule the next update. When the browser window (or tab) is active, this will cause updates to happen at a rate of about 60 per second, which tends to produce a good-looking animation."
          ]
        },
        {
          "element": "p",
          "content": [
            "If we just updated the DOM in a loop, the page would freeze and nothing would show up on the screen. Browsers do not update their display while a JavaScript program is running, nor do they allow any interaction with the page. This is why we need ",
            {
              "element": "literal",
              "content": [
                "requestAnimationFrame"
              ]
            },
            "—it lets the browser know that we are done for now, and it can go ahead and do the things that browsers do, such as updating the screen and responding to user actions."
          ]
        },
        {
          "element": "p",
          "content": [
            "Our animation function is passed the current time as an argument, which it compares to the time it saw before (the ",
            {
              "element": "literal",
              "content": [
                "lastTime"
              ]
            },
            " variable) to ensure the motion of the cat per millisecond is stable, and the animation moves smoothly. If it just moved a fixed amount per step, the motion would stutter if, for example, another heavy task running on the same computer were to prevent the function from running for a fraction of a second."
          ]
        },
        {
          "element": "p",
          "content": [
            "Moving in circles is done using the trigonometry functions ",
            {
              "element": "literal",
              "content": [
                "Math.cos"
              ]
            },
            " and ",
            {
              "element": "literal",
              "content": [
                "Math.sin"
              ]
            },
            ". For those of you who aren’t familiar with these, I’ll briefly introduce them since we will occasionally need them in this book."
          ]
        },
        {
          "element": "p",
          "content": [
            {
              "element": "literal",
              "content": [
                "Math.cos"
              ]
            },
            " and ",
            {
              "element": "literal",
              "content": [
                "Math.sin"
              ]
            },
            " are useful for finding points that lie on a circle around point (0,0) with a radius of one unit. Both functions interpret their argument as the position on this circle, with zero denoting the point on the far right of the circle, going clockwise until 2π (about 6.28) has taken us around the whole circle. ",
            {
              "element": "literal",
              "content": [
                "Math.cos"
              ]
            },
            " tells you the x-coordinate of the point that corresponds to the given position around the circle, while ",
            {
              "element": "literal",
              "content": [
                "Math.sin"
              ]
            },
            " yields the y-coordinate. Positions (or angles) greater than 2π or less than 0 are valid—the rotation repeats so that ",
            {
              "element": "em",
              "content": [
                "a"
              ]
            },
            "+2π refers to the same angle as ",
            {
              "element": "em",
              "content": [
                "a"
              ]
            },
            "."
          ]
        },
        {
          "element": "img",
          "src": "img/cos_sin.svg"
        },
        {
          "element": "p",
          "content": [
            "The cat animation code keeps a counter, ",
            {
              "element": "literal",
              "content": [
                "angle"
              ]
            },
            ", for the current angle of the animation and increments it in proportion to the elapsed time every time the ",
            {
              "element": "literal",
              "content": [
                "animate"
              ]
            },
            " function is called. It can then use this angle to compute the current position of the image element. The ",
            {
              "element": "literal",
              "content": [
                "top"
              ]
            },
            " style is computed with ",
            {
              "element": "literal",
              "content": [
                "Math.sin"
              ]
            },
            " and multiplied by 20, which is the vertical radius of our circle. The ",
            {
              "element": "literal",
              "content": [
                "left"
              ]
            },
            " style is based on ",
            {
              "element": "literal",
              "content": [
                "Math.cos"
              ]
            },
            " and multiplied by 200 so that the circle is much wider than it is high, resulting in an elliptic motion."
          ]
        },
        {
          "element": "p",
          "content": [
            "Note that styles usually need ",
            {
              "element": "em",
              "content": [
                "units"
              ]
            },
            ". In this case, we have to append ",
            {
              "element": "literal",
              "content": [
                "\"px\""
              ]
            },
            " to the number to tell the browser we are counting in pixels (as opposed to centimeters, “ems”, or other units). This is easy to forget. Using numbers without units will result in your style being ignored—unless the number is 0, which always means the same thing, regardless of its unit."
          ]
        }
      ],
      "title": "Positioning and animating"
    },
    {
      "element": "section",
      "content": [
        {
          "element": "p",
          "content": [
            "JavaScript programs may inspect and interfere with the current document that a browser is displaying through a data structure called the DOM. This data structure represents the browser’s model of the document, and a JavaScript program can modify it to change the visible document."
          ]
        },
        {
          "element": "p",
          "content": [
            "The DOM is organized like a tree, in which elements are arranged hierarchically according to the structure of the document. The objects representing elements have properties such as ",
            {
              "element": "literal",
              "content": [
                "parentNode"
              ]
            },
            " and ",
            {
              "element": "literal",
              "content": [
                "childNodes"
              ]
            },
            ", which can be used to navigate through this tree."
          ]
        },
        {
          "element": "p",
          "content": [
            "The way a document is displayed can be influenced by ",
            {
              "element": "em",
              "content": [
                "styling"
              ]
            },
            ", both by attaching styles to nodes directly and by defining rules that match certain nodes. There are many different style properties, such as ",
            {
              "element": "literal",
              "content": [
                "color"
              ]
            },
            " or ",
            {
              "element": "literal",
              "content": [
                "display"
              ]
            },
            ". JavaScript can manipulate an element’s style directly through its ",
            {
              "element": "literal",
              "content": [
                "style"
              ]
            },
            " property."
          ]
        }
      ],
      "title": "Summary"
    },
    {
      "element": "section",
      "content": [
        {
          "element": "section",
          "content": [
            {
              "element": "p",
              "content": [
                "We built plaintext tables in ",
                {
                  "element": "reference",
                  "content": [
                    "Chapter 6"
                  ]
                },
                ". HTML makes laying out tables quite a bit easier. An HTML table is built with the following tag structure:"
              ]
            },
            {
              "element": "listing",
              "numbered": false,
              "content": "<table>\n  <tr>\n    <th>name</th>\n    <th>height</th>\n    <th>country</th>\n  </tr>\n  <tr>\n    <td>Kilimanjaro</td>\n    <td>5895</td>\n    <td>Tanzania</td>\n  </tr>\n</table>"
            },
            {
              "element": "p",
              "content": [
                "For each ",
                {
                  "element": "em",
                  "content": [
                    "row"
                  ]
                },
                ", the ",
                {
                  "element": "literal",
                  "content": [
                    "<table>"
                  ]
                },
                " tag contains a ",
                {
                  "element": "literal",
                  "content": [
                    "<tr>"
                  ]
                },
                " tag. Inside of these ",
                {
                  "element": "literal",
                  "content": [
                    "<tr>"
                  ]
                },
                " tags, we can put cell elements: either heading cells (",
                {
                  "element": "literal",
                  "content": [
                    "<th>"
                  ]
                },
                ") or regular cells (",
                {
                  "element": "literal",
                  "content": [
                    "<td>"
                  ]
                },
                ")."
              ]
            },
            {
              "element": "p",
              "content": [
                "The same source data that was used in ",
                {
                  "element": "reference",
                  "content": [
                    "Chapter 6"
                  ]
                },
                " is again available in the ",
                {
                  "element": "literal",
                  "content": [
                    "MOUNTAINS"
                  ]
                },
                " variable in the sandbox. It can also be ",
                {
                  "element": "reference",
                  "content": [
                    "downloaded"
                  ]
                },
                " from the website."
              ]
            },
            {
              "element": "p",
              "content": [
                "Write a function ",
                {
                  "element": "literal",
                  "content": [
                    "buildTable"
                  ]
                },
                " that, given an array of objects that all have the same set of properties, builds up a DOM structure representing a table. The table should have a header row with the property names wrapped in ",
                {
                  "element": "literal",
                  "content": [
                    "<th>"
                  ]
                },
                " elements and should have one subsequent row per object in the array, with its property values in ",
                {
                  "element": "literal",
                  "content": [
                    "<td>"
                  ]
                },
                " elements."
              ]
            },
            {
              "element": "p",
              "content": [
                "The ",
                {
                  "element": "literal",
                  "content": [
                    "Object.keys"
                  ]
                },
                " function, which returns an array containing the property names that an object has, will probably be helpful here."
              ]
            },
            {
              "element": "p",
              "content": [
                "Once you have the basics working, right-align cells containing numbers by setting their ",
                {
                  "element": "literal",
                  "content": [
                    "style.textAlign"
                  ]
                },
                " property to ",
                {
                  "element": "literal",
                  "content": [
                    "\"right\""
                  ]
                },
                "."
              ]
            },
            {
              "element": "hint",
              "content": [
                {
                  "element": "p",
                  "content": [
                    "Use ",
                    {
                      "element": "literal",
                      "content": [
                        "document.createElement"
                      ]
                    },
                    " to create new element nodes, ",
                    {
                      "element": "literal",
                      "content": [
                        "document.createTextNode"
                      ]
                    },
                    " to create text nodes, and the ",
                    {
                      "element": "literal",
                      "content": [
                        "appendChild"
                      ]
                    },
                    " method to put nodes into other nodes."
                  ]
                },
                {
                  "element": "p",
                  "content": [
                    "You should loop over the key names once to fill in the top row and then again for each object in the array to construct the data rows."
                  ]
                },
                {
                  "element": "p",
                  "content": [
                    "Don’t forget to return the enclosing ",
                    {
                      "element": "literal",
                      "content": [
                        "<table>"
                      ]
                    },
                    " element at the end of the function."
                  ]
                }
              ]
            }
          ],
          "title": "Build a table"
        },
        {
          "element": "section",
          "content": [
            {
              "element": "p",
              "content": [
                "The ",
                {
                  "element": "literal",
                  "content": [
                    "getElementsByTagName"
                  ]
                },
                " method returns all child elements with a given tag name. Implement your own version of it as a regular nonmethod function that takes a node and a string (the tag name) as arguments and returns an array containing all descendant element nodes with the given tag name."
              ]
            },
            {
              "element": "p",
              "content": [
                "To find the tag name of an element, use its ",
                {
                  "element": "literal",
                  "content": [
                    "tagName"
                  ]
                },
                " property. But note that this will return the tag name in all uppercase. Use the ",
                {
                  "element": "literal",
                  "content": [
                    "toLowerCase"
                  ]
                },
                " or ",
                {
                  "element": "literal",
                  "content": [
                    "toUpperCase"
                  ]
                },
                " string method to compensate for this."
              ]
            },
            {
              "element": "hint",
              "content": [
                {
                  "element": "p",
                  "content": [
                    "The solution is most easily expressed with a recursive function, similar to the ",
                    {
                      "element": "reference",
                      "content": [
                        {
                          "element": "literal",
                          "content": [
                            "talksAbout"
                          ]
                        },
                        " function"
                      ]
                    },
                    " defined earlier in this chapter."
                  ]
                },
                {
                  "element": "p",
                  "content": [
                    "You could call ",
                    {
                      "element": "literal",
                      "content": [
                        "byTagname"
                      ]
                    },
                    " itself recursively, concatenating the resulting arrays to produce the output. For a more efficient approach, define an inner function that calls itself recursively and that has access to an array variable defined in the outer function to which it can add the matching elements it finds. Don’t forget to call the inner function once from the outer function."
                  ]
                },
                {
                  "element": "p",
                  "content": [
                    "The recursive function must check the node type. Here we are interested only in node type 1 (",
                    {
                      "element": "literal",
                      "content": [
                        "document.ELEMENT_NODE"
                      ]
                    },
                    "). For such nodes, we must loop over their children and, for each child, see whether the child matches the query while also doing a recursive call on it to inspect its own children."
                  ]
                }
              ]
            }
          ],
          "title": "Elements by tag name"
        },
        {
          "element": "section",
          "content": [
            {
              "element": "p",
              "content": [
                "Extend the cat animation defined ",
                {
                  "element": "reference",
                  "content": [
                    "earlier"
                  ]
                },
                " so that both the cat and his hat (",
                {
                  "element": "literal",
                  "content": [
                    "<img src=\"img/hat.png\">"
                  ]
                },
                ") orbit at opposite sides of the ellipse."
              ]
            },
            {
              "element": "p",
              "content": [
                "Or make the hat circle around the cat. Or alter the animation in some other interesting way."
              ]
            },
            {
              "element": "p",
              "content": [
                "To make positioning multiple objects easier, it is probably a good idea to switch to absolute positioning. This means that ",
                {
                  "element": "literal",
                  "content": [
                    "top"
                  ]
                },
                " and ",
                {
                  "element": "literal",
                  "content": [
                    "left"
                  ]
                },
                " are counted relative to the top left of the document. To avoid using negative coordinates, you can simply add a fixed number of pixels to the position values."
              ]
            }
          ],
          "title": "s hat"
        }
      ],
      "title": "Exercises"
    }
  ],
  "title": "The Document Object Model"
}
